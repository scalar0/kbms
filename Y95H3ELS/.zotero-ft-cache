Graduate Texts in Mathematics
Graph Theory
Reinhard Diestel
Fifth Edition


Graduate Texts in Mathematics 173


Graduate Texts in Mathematics
Series Editors:
Sheldon Axler
San Francisco State University, San Francisco, CA, USA
Kenneth Ribet
University of California, Berkeley, CA, USA
Advisory Board:
Alejandro Adem, University of British Colombia David Eisenbud, University of California, Berkeley & MSRI Irene M. Gamba, The University of Texas at Austin J.F. Jardine, University of Western Ontario Jeffrey C. Lagarias, University of Michigan Ken Ono, Emory University Jeremy Quastel, University of Toronto Fadil Santosa, University of Minnesota Barry Simon, California Institute of Technology
Graduate Texts in Mathematics bridge the gap between passive study and creative understanding, offering graduate-level introductions to advanced topics in mathematics. The volumes are carefully written as teaching aids and highlight characteristic features of the theory. Although these books are frequently used as textbooks in graduate courses, they are also suitable for individual study.
More information about this series at http://www.springer.com/series/136


Reinhard Diestel
Graph Theory
Fifth Edition


Reinhard Diestel Mathematisches Seminar der Universität Hamburg Hamburg, Germany
ISSN 0072-5285 ISSN 2197-5612 (electronic) Graduate Texts in Mathematics ISBN 978-3-662-53621-6 DOI 10.1007/978-3-662-53622-3
Library of Congress Control Number: 2017936668
Mathematics Subject Classification (2010): 05-01, 05Cxx
© Reinhard Diestel 2017 This work is subject to copyright. All rights are reserved by the author, whether the whole or part of the material is concerned, specifically the rights of translation, reprinting, reuse of illustrations, recitation, broadcasting, reproduction on microfilms or in any other physical way, and transmission or information storage and retrieval, electronic adaptation, computer software, or by similar or dissimilar methodology now known or hereafter developed. The use of general descriptive names, registered names, trademarks, service marks, etc. in this publication does not imply, even in the absence of a specific statement, that such names are exempt from the relevant protective laws and regulations and therefore free for general use. The publisher, the authors and the editors are safe to assume that the advice and information in this book are believed to be true and accurate at the date of publication. Neither the publisher nor the authors or the editors give a warranty, express or implied, with respect to the material contained herein or for any errors or omissions that may have been made.
Printed on acid-free paper
This Springer imprint is published by Springer Nature The registered company is Springer-Verlag GmbH Germany The registered company address is: Heidelberger Platz 3, 14197 Berlin, Germany


To Dagmar




Preface
Almost two decades have passed since the appearance of those graph theory texts that still set the agenda for most introductory courses taught today. The canon created by those books has helped to identify some main fields of study and research, and will doubtless continue to influence the development of the discipline for some time to come. Yet much has happened in those 20 years, in graph theory no less than elsewhere: deep new theorems have been found, seemingly disparate methods and results have become interrelated, entire new branches have arisen. To name just a few such developments, one may think of how the new notion of list colouring has bridged the gulf between invariants such as average degree and chromatic number, how probabilistic methods and the regularity lemma have pervaded extremal graph theory and Ramsey theory, or how the entirely new field of graph minors and tree-decompositions has brought standard methods of surface topology to bear on long-standing algorithmic graph problems. Clearly, then, the time has come for a reappraisal: what are, today, the essential areas, methods and results that should form the centre of an introductory graph theory course aiming to equip its audience for the most likely developments ahead?
I have tried in this book to offer material for such a course. In view of the increasing complexity and maturity of the subject, I have broken with the tradition of attempting to cover both theory and applications: this book offers an introduction to the theory of graphs as part of (pure) mathematics; it contains neither explicit algorithms nor ‘real world’ applications. My hope is that the potential for depth gained by this restriction in scope will serve students of computer science as much as their peers in mathematics: assuming that they prefer algorithms but will benefit from an encounter with pure mathematics of some kind, it seems an ideal opportunity to look for this close to where their heart lies! In the selection and presentation of material, I have tried to accommodate two conflicting goals. On the one hand, I believe that an


viii Preface
introductory text should be lean and concentrate on the essential, so as to offer guidance to those new to the field. As a graduate text, moreover, it should get to the heart of the matter quickly: after all, the idea is to convey at least an impression of the depth and methods of the subject. On the other hand, it has been my particular concern to write with sufficient detail to make the text enjoyable and easy to read: guiding questions and ideas will be discussed explicitly, and all proofs presented will be rigorous and complete. A typical chapter, therefore, begins with a brief discussion of what are the guiding questions in the area it covers, continues with a succinct account of its classic results (often with simplified proofs), and then presents one or two deeper theorems that bring out the full flavour of that area. The proofs of these latter results are typically preceded by (or interspersed with) an informal account of their main ideas, but are then presented formally at the same level of detail as their simpler counterparts. I soon noticed that, as a consequence, some of those proofs came out rather longer in print than seemed fair to their often beautifully simple conception. I would hope, however, that even for the professional reader the relatively detailed account of those proofs will at least help to minimize reading time. . . If desired, this text can be used for a lecture course with little or no further preparation. The simplest way to do this would be to follow the order of presentation, chapter by chapter: apart from two clearly marked exceptions, any results used in the proof of others precede them in the text. Alternatively, a lecturer may wish to divide the material into an easy basic course for one semester, and a more challenging follow-up course for another. To help with the preparation of courses deviating from the order of presentation, I have listed in the margin next to each proof the reference numbers of those results that are used in that proof. These references are given in round brackets: for example, a reference (4.1.2) in the margin next to the proof of Theorem 4.3.2 indicates that Lemma 4.1.2 will be used in this proof. Correspondingly, in the margin next to Lemma 4.1.2 there is a reference [4.3.2] (in square brackets) informing the reader that this lemma will be used in the proof of Theorem 4.3.2. Note that this system applies between different sections only (of the same or of different chapters): the sections themselves are written as units and best read in their order of presentation. The mathematical prerequisites for this book, as for most graph theory texts, are minimal: a first grounding in linear algebra is assumed for Chapter 1.9 and once in Chapter 5.5, some basic topological concepts about the Euclidean plane and 3-space are used in Chapter 4, and a previous first encounter with elementary probability will help with Chapter 11. (Even here, all that is assumed formally is the knowledge of basic definitions: the few probabilistic tools used are developed in the


Preface ix
text.) There are two areas of graph theory which I find both fascinating and important, especially from the perspective of pure mathematics adopted here, but which are not covered in this book: these are algebraic graph theory and infinite graphs. At the end of each chapter, there is a section with exercises and another with bibliographical and historical notes. Many of the exercises were chosen to complement the main narrative of the text: they illustrate new concepts, show how a new invariant relates to earlier ones, or indicate ways in which a result stated in the text is best possible. Particularly easy exercises are identified by the superscript −, the more challenging ones carry a +. The notes are intended to guide the reader on to further reading, in particular to any monographs or survey articles on the theme of that chapter. They also offer some historical and other remarks on the material presented in the text. Ends of proofs are marked by the symbol . Where this symbol is found directly below a formal assertion, it means that the proof should be clear after what has been said—a claim waiting to be verified! There are also some deeper theorems which are stated, without proof, as background information: these can be identified by the absence of both proof and . Almost every book contains errors, and this one will hardly be an exception. I shall try to post on the Web any corrections that become necessary. The relevant site may change in time, but will always be accessible via the following two addresses:
http://www.springer-ny.com/supplements/diestel/ http://www.springer.de/catalog/html-files/deutsch/math/3540609180.html
Please let me know about any errors you find. Little in a textbook is truly original: even the style of writing and of presentation will invariably be influenced by examples. The book that no doubt influenced me most is the classic GTM graph theory text by Bolloba ́s: it was in the course recorded by this text that I learnt my first graph theory as a student. Anyone who knows this book well will feel its influence here, despite all differences in contents and presentation. I should like to thank all who gave so generously of their time, knowledge and advice in connection with this book. I have benefited particularly from the help of N. Alon, G. Brightwell, R. Gillett, R. Halin, M. Hintz, A. Huck, I. Leader, T. Luczak, W. Mader, V. Ro ̈dl, A.D. Scott,
P.D. Seymour, G. Simonyi, M. ˇSkoviera, R. Thomas, C. Thomassen and P. Valtr. I am particularly grateful also to Tommy R. Jensen, who taught me much about colouring and all I know about k-flows, and who invested immense amounts of diligence and energy in his proofreading of the preliminary German version of this book.
March 1997 RD


x Preface
About the second edition
Naturally, I am delighted at having to write this addendum so soon after this book came out in the summer of 1997. It is particularly gratifying to hear that people are gradually adopting it not only for their personal use but more and more also as a course text; this, after all, was my aim when I wrote it, and my excuse for agonizing more over presentation than I might otherwise have done. There are two major changes. The last chapter on graph minors now gives a complete proof of one of the major results of the RobertsonSeymour theory, their theorem that excluding a graph as a minor bounds the tree-width if and only if that graph is planar. This short proof did not exist when I wrote the first edition, which is why I then included a short proof of the next best thing, the analogous result for path-width. That theorem has now been dropped from Chapter 12. Another addition in this chapter is that the tree-width duality theorem, Theorem 12.4.3, now comes with a (short) proof too. The second major change is the addition of a complete set of hints for the exercises. These are largely Tommy Jensen’s work, and I am grateful for the time he donated to this project. The aim of these hints is to help those who use the book to study graph theory on their own, but not to spoil the fun. The exercises, including hints, continue to be intended for classroom use. Apart from these two changes, there are a few additions. The most noticable of these are the formal introduction of depth-first search trees in Section 1.5 (which has led to some simplifications in later proofs) and an ingenious new proof of Menger’s theorem due to Bo ̈hme, Go ̈ring and Harant (which has not otherwise been published). Finally, there is a host of small simplifications and clarifications of arguments that I noticed as I taught from the book, or which were pointed out to me by others. To all these I offer my special thanks. The Web site for the book has followed me to
http://www.math.uni-hamburg.de/home/diestel/books/graph.theory/
I expect this address to be stable for some time. Once more, my thanks go to all who contributed to this second edition by commenting on the first—and I look forward to further comments!
December 1999 RD


Preface xi
About the third edition
There is no denying that this book has grown. Is it still as ‘lean and concentrating on the essential’ as I said it should be when I wrote the preface to the first edition, now almost eight years ago? I believe that it is, perhaps now more than ever. So why the increase in volume? Part of the answer is that I have continued to pursue the original dual aim of offering two different things between one pair of covers:
• a reliable first introduction to graph theory that can be used either for personal study or as a course text;
• a graduate text that also offers some depth on the most important topics.
For each of these aims, some material has been added. Some of this covers new topics, which can be included or skipped as desired. An example at the introductory level is the new section on packing and covering with the Erdo ̋s-Po ́sa theorem, or the inclusion of the stable marriage theorem in the matching chapter. An example at the graduate level is the Robertson-Seymour structure theorem for graphs without a given minor: a result that takes a few lines to state, but one which is increasingly relied on in the literature, so that an easily accessible reference seems desirable. Another addition, also in the chapter on graph minors, is a new proof of the ‘Kuratowski theorem for higher surfaces’—a proof which illustrates the interplay between graph minor theory and surface topology better than was previously possible. The proof is complemented by an appendix on surfaces, which supplies the required background and also sheds some more light on the proof of the graph minor theorem. Changes that affect previously existing material are rare, except for countless local improvements intended to consolidate and polish rather than change. I am aware that, as this book is increasingly adopted as a course text, there is a certain desire for stability. Many of these local improvements are the result of generous feedback I got from colleagues using the book in this way, and I am very grateful for their help and advice. There are also some local additions. Most of these developed from my own notes, pencilled in the margin as I prepared to teach from the book. They typically complement an important but technical proof, when I felt that its essential ideas might get overlooked in the formal write-up. For example, the proof of the Erdo ̋s-Stone theorem now has an informal post-mortem that looks at how exactly the regularity lemma comes to be applied in it. Unlike the formal proof, the discussion starts out from the main idea, and finally arrives at how the parameters to be declared at the start of the formal proof must be specified. Similarly, there is now a discussion pointing to some ideas in the proof of the perfect


xii Preface
graph theorem. However, in all these cases the formal proofs have been left essentially untouched. The only substantial change to existing material is that the old Theorem 8.1.1 (that cr2n edges force a T Kr) seems to have lost its nice (and long) proof. Previously, this proof had served as a welcome opportunity to explain some methods in sparse extremal graph theory. These methods have migrated to the connectivity chapter, where they now live under the roof of the new proof by Thomas and Wollan that 8kn edges make a 2k-connected graph k-linked. So they are still there, leaner than ever before, and just presenting themselves under a new guise. As a consequence of this change, the two earlier chapters on dense and sparse extremal graph theory could be reunited, to form a new chapter appropriately named as Extremal Graph Theory. Finally, there is an entirely new chapter, on infinite graphs. When graph theory first emerged as a mathematical discipline, finite and infinite graphs were usually treated on a par. This has changed in recent years, which I see as a regrettable loss: infinite graphs continue to provide a natural and frequently used bridge to other fields of mathematics, and they hold some special fascination of their own. One aspect of this is that proofs often have to be more constructive and algorithmic in nature than their finite counterparts. The infinite version of Menger’s theorem in Section 8.4 is a typical example: it offers algorithmic insights into connectivity problems in networks that are invisible to the slick inductive proofs of the finite theorem given in Chapter 3.3. Once more, my thanks go to all the readers and colleagues whose comments helped to improve the book. I am particularly grateful to Imre Leader for his judicious comments on the whole of the infinite chapter; to my graph theory seminar, in particular to Lilian Matthiesen and Philipp Spr ̈ussel, for giving the chapter a test run and solving all its exercises (of which eighty survived their scrutiny); to Agelos Georgakopoulos for much proofreading elsewhere; to Melanie Win Myint for recompiling the index and extending it substantially; and to Tim Stelldinger for nursing the whale on page 404 until it was strong enough to carry its baby dinosaur.
May 2005 RD


Preface xiii
About the fourth edition
In this fourth edition there are few substantial additions of new material, but many improvements. As with previous new editions, there are countless small and subtle changes to further elucidate a particular argument or concept. When prompted by reader feedback, for which I am always grateful, I still try to recast details that have been found harder than they should be. These can be very basic; a nice example, this time, is the definition of a minor in Chapter 1. At a more substantial level, there are several new and simpler proofs of classical results, in one case reducing the already shortened earlier proof to half its length (and twice its beauty). These newly added proofs include the marriage theorem, the tree packing theorem, Tutte’s cycle space and wheel theorem, Fleischner’s theorem on Hamilton cycles, and the threshold theorem for the edge probability guaranteeing a specified type of subgraph. There are also one or two genuinely new theorems. One of these is an ingenious local degree condition for the existence of a Hamilton cycle, due to Asratian and Khachatrian, that implies a number of classical hamiltonicity theorems. In some sections I have reorganized the material slightly, or rewritten the narrative. Typically, these are sections that had grown over the previous three editions, and this was beginning to affect their balance of material and momentum. As the book remains committed to offering not just a collection of theorems and proofs, but tries whenever possible to indicate a somewhat larger picture in which these have their place, maintaining its original freshness and flow remains a challenge that I enjoy trying to meet. Finally, the book has its own dedicated website now, at
http://diestel-graph-theory.com/
Potentially, this offers opportunities for more features surrounding the book than the traditional free online edition and a dwindling collection of misprints. If you have any ideas and would like to see them implemented, do let me know.
May 2010 RD


xiv Preface
About the fifth edition
This fifth edition of the book is again a major overhaul, in the spirit of its first and third edition. I have rewritten Chapter 12 on graph minors to take account of recent developments. In addition to many smaller updates it offers a new proof of the tree-width duality theorem, due to Mazoit, which has not otherwise been published. More fundamentally, I have added a section on tangles. Originally devised by Robertson and Seymour as a technical device for their proof of the graph minor theorem, tangles have turned out to be much more fundamental than this: they define a new paradigm for identifying highly connected parts in a graph. Unlike earlier attempts at defining such substructures—in terms of, say, highly connected subgraphs, minors, or topological minors—tangles do not attempt to pin down this substructure in terms of vertices, edges, or connecting paths, but seek to capture it indirectly by orienting all the low-order separations of the graph towards it. In short, we no longer ask what exactly the highly connected region is, but only where it is. For many applications, this is exactly what matters. Moreover, this more abstract notion of high local connectivity can easily be transported to contexts outside graph theory. This, in turn, makes graph minor theory applicable beyond graph theory itself in a new way, via tangles. I have written the new section on tangles from this modern perspective. Chapter 2 has a newly written section on tree packing and covering. I rewrote it from scratch to take advantage of a beautiful new unified theorem containing both aspects at once: the packing-covering theorem of Bowler and Carmesin. While their original result was proved for matroids, its graph version has a very short and self-contained proof. This proof is given in Chapter 2.4, and again is not found in print elsewhere. Chapter 8, on infinite graphs, now treats the topological aspects of locally finite graphs more thoroughly. It puts the Freudenthal compactification of a graph G into perspective by describing it, in addition, as an inverse limit of the finite contraction minors of G. Readers with a background in group theory will find this familiar. As always, there are countless small improvements to the narrative, proofs, and exercises. My thanks go to all those who suggested these. Finally, I have made two adjustments to help ensure that the exercises remain usable in class at a time of instant internet access. The Hints appendix still exists, but has been relegated to the professional electronic edition so that lecturers can decide which hints to give and which not. Similarly, exercises asking for a proof of a named theorem no longer mention this name, so that the proof cannot simply be searched for. However if you know the name and wish to find the exercise, the index still has a name entry that will take you to the right page.
July 2016 RD


Contents
Preface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . vii
1. The Basics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
1.1 Graphs* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 1.2 The degree of a vertex* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 1.3 Paths and cycles* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 1.4 Connectivity* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 1.5 Trees and forests* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 1.6 Bipartite graphs* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 1.7 Contraction and minors* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 1.8 Euler tours* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 1.9 Some linear algebra . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 1.10 Other notions of graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
2. Matching, Covering and Packing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
2.1 Matching in bipartite graphs* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36 2.2 Matching in general graphs(∗) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 2.3 The Erdo ̋s-Po ́sa theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45 2.4 Tree packing and arboricity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 2.5 Path covers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
* Sections marked by an asterisk are recommended for a first course.
Of sections marked (∗), the beginning is recommended for a first course.


xvi Contents
3. Connectivity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
3.1 2-Connected graphs and subgraphs* . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
3.2 The structure of 3-connected graphs(∗) . . . . . . . . . . . . . . . . . . . . . . . . . . 62 3.3 Menger’s theorem* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67 3.4 Mader’s theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72 3.5 Linking pairs of vertices(∗) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82 Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
4. Planar Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89
4.1 Topological prerequisites* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90 4.2 Plane graphs* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92 4.3 Drawings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
4.4 Planar graphs: Kuratowski’s theorem* . . . . . . . . . . . . . . . . . . . . . . . . . . 102 4.5 Algebraic planarity criteria . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107 4.6 Plane duality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113 Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
5. Colouring . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119
5.1 Colouring maps and planar graphs* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120 5.2 Colouring vertices* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122 5.3 Colouring edges* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127 5.4 List colouring . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129 5.5 Perfect graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142 Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
6. Flows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149
6.1 Circulations(∗) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150 6.2 Flows in networks* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151 6.3 Group-valued flows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154 6.4 k-Flows for small k . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159 6.5 Flow-colouring duality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162 6.6 Tutte’s flow conjectures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169 Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171


Contents xvii
7. Extremal Graph Theory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
7.1 Subgraphs* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
7.2 Minors(∗) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
7.3 Hadwiger’s conjecture* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
7.4 Szemere ́di’s regularity lemma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
7.5 Applying the regularity lemma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204
8. Infinite Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209
8.1 Basic notions, facts and techniques* . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210
8.2 Paths, trees, and ends(∗) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219
8.3 Homogeneous and universal graphs* . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
8.4 Connectivity and matching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
8.5 Recursive structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242
8.6 Graphs with ends: the complete picture . . . . . . . . . . . . . . . . . . . . . . . . . 245
8.7 The topological cycle space . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254
8.8 Infinite graphs as limits of finite ones . . . . . . . . . . . . . . . . . . . . . . . . . . . 258
Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 273
9. Ramsey Theory for Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283
9.1 Ramsey’s original theorems* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284
9.2 Ramsey numbers(∗) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287
9.3 Induced Ramsey theorems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290
9.4 Ramsey properties and connectivity(∗) . . . . . . . . . . . . . . . . . . . . . . . . . . . 300
Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303
Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304
10. Hamilton Cycles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307
10.1 Sufficient conditions* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307
10.2 Hamilton cycles and degree sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . 311
10.3 Hamilton cycles in the square of a graph . . . . . . . . . . . . . . . . . . . . . . . . 314
Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319
Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320


xviii Contents
11. Random Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323
11.1 The notion of a random graph* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324 11.2 The probabilistic method* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329
11.3 Properties of almost all graphs* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 332
11.4 Threshold functions and second moments . . . . . . . . . . . . . . . . . . . . . . . 335 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 342 Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 344
12. Graph Minors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347
12.1 Well-quasi-ordering(∗) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 348
12.2 The graph minor theorem for trees . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 349 12.3 Tree-decompositions(∗) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351 12.4 Tree-width(∗) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 355 12.5 Tangles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 360
12.6 Tree-decompositions and forbidden minors . . . . . . . . . . . . . . . . . . . . . . 369 12.7 The graph minor theorem(∗) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 374 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 382 Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 388
A. Infinite sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 393
B. Surfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 399
Hints for all the exercises. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 407 Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 409 Symbol index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427


1 The Basics
This chapter gives a gentle yet concise introduction to most of the terminology used later in the book. Fortunately, much of standard graph theoretic terminology is so intuitive that it is easy to remember; the few terms better understood in their proper setting will be introduced later, when their time has come. Section 1.1 offers a brief but self-contained summary of the most basic definitions in graph theory, those centred round the notion of a graph. Most readers will have met these definitions before, or will have them explained to them as they begin to read this book. For this reason, Section 1.1 does not dwell on these definitions more than clarity requires: its main purpose is to collect the most basic terms in one place, for easy reference later. For deviations for multigraphs see Section 1.10. From Section 1.2 onwards, all new definitions will be brought to life almost immediately by a number of simple yet fundamental propositions. Often, these will relate the newly defined terms to one another: the question of how the value of one invariant influences that of another underlies much of graph theory, and it will be good to become familiar with this line of thinking early. By N we denote the set of natural numbers, including zero. The set Z/nZ of integers modulo n is denoted by Zn; its elements are written Zn as i := i + nZ. When we regard Z2 = {0, 1} as a field, we also denote it as F2 = {0, 1}. For a real number x we denote by x the greatest integer x, and by x the least integer x. Logarithms written as x , x ‘log’ are taken at base 2; the natural logarithm will be denoted by ‘ln’. log, ln The expressions x := y and y =: x mean that x is being defined as y. A set A = {A1, . . . , Ak} of disjoint subsets of a set A is a partition partition
of A if the union ⋃ A of all the sets Ai ∈ A is A and Ai = ∅ for every i. ⋃ A
Another partition {A′1, . . . , A′ } of A refines the partition A if each A′i is
contained in some Aj. By [A]k we denote the set of all k-element subsets [A]k of A. Sets with k elements will be called k-sets; subsets with k elements
are k-subsets. k-set
R. Diestel, Graph Theory, Graduate Texts in Mathematics 173, DOI 10.1007/978-3-662-53622-3_1
© Reinhard Diestel 2017 1


2 1. The Basics
1.1 Graphs
graph A graph is a pair G = (V, E) of sets such that E ⊆ [V ]2; thus, the elements of E are 2-element subsets of V . To avoid notational ambiguities, we shall always assume tacitly that V ∩ E = ∅. The elements of V are the vertex vertices (or nodes, or points) of the graph G, the elements of E are its edge edges (or lines). The usual way to picture a graph is by drawing a dot for each vertex and joining two of these dots by a line if the corresponding two vertices form an edge. Just how these dots and lines are drawn is considered irrelevant: all that matters is the information of which pairs of vertices form an edge and which do not.
1
2
3
4
5
6
7
Fig. 1.1.1. The graph on V = {1, . . . , 7} with edge set E = {{1, 2}, {1, 5}, {2, 5}, {3, 4}, {5, 7}}
on A graph with vertex set V is said to be a graph on V . The vertex V (G), E(G) set of a graph G is referred to as V (G), its edge set as E(G). These conventions are independent of any actual names of these two sets: the vertex set W of a graph H = (W, F ) is still referred to as V (H), not as W (H). We shall not always distinguish strictly between a graph and its vertex or edge set. For example, we may speak of a vertex v ∈ G (rather than v ∈ V (G)), an edge e ∈ G, and so on. order The number of vertices of a graph G is its order , written as |G|; its |G|, ‖G‖ number of edges is denoted by ‖G‖. Graphs are finite, infinite, countable and so on according to their order. Except in Chapter 8, our graphs will be finite unless otherwise stated. ∅ For the empty graph (∅, ∅) we simply write ∅. A graph of order 0 or 1 is called trivial. Sometimes, e.g. to start an induction, trivial graphs can
trivial
graph be useful; at other times they form silly counterexamples and become a nuisance. To avoid cluttering the text with non-triviality conditions, we shall mostly treat the trivial graphs, and particularly the empty graph ∅, with generous disregard. incident A vertex v is incident with an edge e if v ∈ e; then e is an edge at v. ends The two vertices incident with an edge are its endvertices or ends, and an edge joins its ends. An edge {x, y} is usually written as xy (or yx). If x ∈ X and y ∈ Y , then xy is an X–Y edge. The set of all X–Y edges E(X, Y ) in a set E is denoted by E(X, Y ); instead of E({x}, Y ) and E(X, {y}) we simply write E(x, Y ) and E(X, y). The set of all the edges in E at a E(v) vertex v is denoted by E(v).


1.1 Graphs 3
Two vertices x, y of G are adjacent, or neighbours, if {x, y} is an edge adjacent of G. Two edges e = f are adjacent if they have an end in common. If all neighbour the vertices of G are pairwise adjacent, then G is complete. A complete complete graph on n vertices is a Kn; a K3 is called a triangle. Kn Pairwise non-adjacent vertices or edges are called independent.
More formally, a set of vertices or of edges is independent if no two of its inde
pendent
elements are adjacent. Independent sets of vertices are also called stable. Let G = (V, E) and G′ = (V ′, E′) be two graphs. A map φ: V → V ′
is a homomorphism from G to G′ if it preserves the adjacency of vertices, homo
morphism
that is, if {φ(x), φ(y)} ∈ E′ whenever {x, y} ∈ E. Then, in particular, for every vertex x′ in the image of φ its inverse image φ−1(x′) is an independent set of vertices in G. If φ is bijective and its inverse φ−1 is also a homomorphism (so that xy ∈ E ⇔ φ(x)φ(y) ∈ E′ for all x, y ∈ V ), we call φ an isomorphism, say that G and G′ are isomorphic, and write isomorphic G G′. An isomorphism from G to itself is an automorphism of G. We do not normally distinguish between isomorphic graphs. Thus, we usually write G = G′ rather than G G′, speak of the complete = graph on 17 vertices, and so on. If we wish to emphasize that we are only interested in the isomorphism type of a given graph, we informally refer to it as an abstract graph. A class of graphs that is closed under isomorphism is called a graph property. For example, ‘containing a triangle’ is a graph property: if property G contains three pairwise adjacent vertices then so does every graph isomorphic to G. A map taking graphs as arguments is called a graph invariant if it assigns equal values to isomorphic graphs. The number invariant of vertices and the number of edges of a graph are two simple graph invariants; the greatest number of pairwise adjacent vertices is another. We set G ∪ G′ := (V ∪ V ′, E ∪ E′) and G ∩ G′ := (V ∩ V ′, E ∩ E′). G ∪ G′ If G ∩ G′ = ∅, then G and G′ are disjoint. If V ′ ⊆ V and E′ ⊆ E, then G ∩ G′
G∪ G− G∩
1
2
3
4
5 G
3
4
5
6
1
2
3
4
5
6
1
2
3
4
5
G′
G′
G′ G′
Fig. 1.1.2. Union, difference and intersection; the vertices 2,3,4 induce (or span) a triangle in G ∪ G′ but not in G


4 1. The Basics
subgraph G′ is a subgraph of G (and G a supergraph of G′), written as G′ ⊆ G. G′ ⊆ G Less formally, we say that G contains G′. If G′ ⊆ G and G′ = G, then G′ is a proper subgraph of G.
G′ G′′
G
Fig. 1.1.3. A graph G with subgraphs G′ and G′′: G′ is an induced subgraph of G, but G′′ is not
If G′ ⊆ G and G′ contains all the edges xy ∈ E with x, y ∈ V ′, then G′ is an induced subgraph of G; we say that V ′ induces or spans G′ in G,
induced
subgraph and write G′ =: G[V ′]. Thus if U ⊆ V is any set of vertices, then G[U ] G[U] denotes the graph on U whose edges are precisely the edges of G with both ends in U . If H is a subgraph of G, not necessarily induced, we spanning abbreviate G[V (H)] to G[H]. Finally, G′ ⊆ G is a spanning subgraph of G if V ′ spans all of G, i.e. if V ′ = V . − If U is any set of vertices (usually of G), we write G − U for G[V U ]. In other words, G − U is obtained from G by deleting all the vertices in U ∩ V and their incident edges. If U = {v} is a singleton, we write G − v rather than G − {v}. Instead of G − V (G′) we simply + write G − G′. For a subset F of [V ]2 we write G − F := (V, E F ) and G + F := (V, E ∪ F ); as above, G − {e} and G + {e} are abbreviated to G − e and G + e. We call G edge-maximal with a given graph property
edge
maximal if G itself has the property but no graph (V, F ) with F E does. minimal More generally, when we call a graph minimal or maximal with some maximal property but have not specified any particular ordering, we are referring to the subgraph relation. When we speak of minimal or maximal sets of vertices or edges, the reference is simply to set inclusion. G ∗ G′ If G and G′ are disjoint, we denote by G ∗ G′ the graph obtained from G ∪ G′ by joining all the vertices of G to all the vertices of G′. For example, K2 ∗ K3 = K5. The complement G of G is the graph on V
comple
ment G with edge set [V ]2 E. The line graph L(G) of G is the graph on E in which x, y ∈ E are adjacent as vertices if and only if they are adjacent
line graph
L(G) as edges in G.
GG
Fig. 1.1.4. A graph isomorphic to its complement


1.2. The degree of a vertex 5
1.2 The degree of a vertex
Let G = (V, E) be a (non-empty) graph. The set of neighbours of a vertex v in G is denoted by NG(v), or briefly by N (v).1 More generally N(v) for U ⊆ V , the neighbours in V U of vertices in U are called neighbours of U ; their set is denoted by N (U ). The degree (or valency) dG(v) = d(v) of a vertex v is the number degree d(v)
|E(v)| of edges at v; by our definition of a graph,2 this is equal to the number of neighbours of v. A vertex of degree 0 is isolated . The number isolated δ(G) := min { d(v) | v ∈ V } is the minimum degree of G, the number δ(G) Δ(G) := max { d(v) | v ∈ V } its maximum degree. If all the vertices Δ(G) of G have the same degree k, then G is k-regular , or simply regular . A regular 3-regular graph is called cubic. cubic The number
d(G) := 1
|V |
∑
v∈V
d(v)
d(G)
is the average degree of G. Clearly, average
degree
δ(G) d(G) Δ(G) .
The average degree quantifies globally what is measured locally by the vertex degrees: the number of edges of G per vertex. Sometimes it will be convenient to express this ratio directly, as ε(G) := |E|/|V |. ε(G) The quantities d and ε are, of course, intimately related. Indeed, if we sum up all the vertex degrees in G, we count every edge exactly twice: once from each of its ends. Thus
|E| = 1
2
∑
v∈V
d(v) = 1
2 d(G) · |V | ,
and therefore
ε(G) = 1
2 d(G) .
Proposition 1.2.1. The number of vertices of odd degree in a graph is [10.3.1] always even.
Proof. As |E| = 1
2
∑
v∈V d(v) is an integer, ∑
v∈V d(v) is even.
1 Here, as elsewhere, we drop the index referring to the underlying graph if the reference is clear.
2 but not for multigraphs; see Section 1.10


6 1. The Basics
If a graph has large minimum degree, i.e. everywhere, locally, many
edges per vertex, it also has many edges per vertex globally: ε(G) =
1
2 d(G) 1
2 δ(G). Conversely, of course, its average degree may be large
even when its minimum degree is small. However, the vertices of large degree cannot be scattered completely among vertices of small degree: as the next proposition shows, every graph G has a subgraph whose average degree is no less than the average degree of G, and whose minimum degree is more than half its average degree:
Proposition 1.2.2. Every graph G with at least one edge has a sub
[1.4.3]
[7.2.2] graph H with δ(H) > ε(H) ε(G).
Proof. To construct H from G, let us try to delete vertices of small degree one by one, until only vertices of large degree remain. Up to which degree d(v) can we afford to delete a vertex v, without lowering ε? Clearly, up to d(v) = ε : then the number of vertices decreases by 1 and the number of edges by at most ε, so the overall ratio ε of edges to vertices will not decrease. Formally, we construct a sequence G = G0 ⊇ G1 ⊇ . . . of induced subgraphs of G as follows. If Gi has a vertex vi of degree d(vi) ε(Gi), we let Gi+1 := Gi − vi; if not, we terminate our sequence and set H := Gi. By the choices of vi we have ε(Gi+1) ε(Gi) for all i, and hence ε(H) ε(G). What else can we say about the graph H? Since ε(K1) = 0 < ε(G), none of the graphs in our sequence is trivial, so in particular H = ∅. The fact that H has no vertex suitable for deletion thus implies δ(H) > ε(H), as claimed.
1.3 Paths and cycles
path A path is a non-empty graph P = (V, E) of the form
V = {x0, x1, . . . , xk} E = {x0x1, x1x2, . . . , xk−1xk} ,
where the xi are all distinct. The vertices x0 and xk are linked by P and are called its endvertices or ends; the vertices x1, . . . , xk−1 are the inner length vertices of P . The number of edges of a path is its length, and the path P k of length k is denoted by P k. Note that k is allowed to be zero; thus, P0 = K1.
We often refer to a path by the natural sequence of its vertices,3
3 More precisely, by one of the two natural sequences: x0 . . . xk and xk . . . x0 denote the same path. Still, it often helps to fix one of these two orderings of V (P ) notationally: we may then speak of things like the ‘first’ vertex on P with a certain property, etc.


1.3 Paths and cycles 7
GP
Fig. 1.3.1. A path P = P 6 in G
writing, say, P = x0x1 . . . xk and calling P a path from x0 to xk (as well as between x0 and xk).
For 0 i j k we write xP y, P ̊
P xi := x0 . . . xi
xiP := xi . . . xk
xiP xj := xi . . . xj
and
P ̊ := x1 . . . xk−1
P x ̊i := x0 . . . xi−1
x ̊iP := xi+1 . . . xk
x ̊iP x ̊j := xi+1 . . . xj−1
for the appropriate subpaths of P . We use similar intuitive notation for the concatenation of paths; for example, if the union P x ∪ xQy ∪ yR of three paths is again a path, we may simply denote it by P xQyR. P xQyR
xP yQz
x
y
z
x
P
y
Q
z
Fig. 1.3.2. Paths P , Q and xP yQz
Given sets A, B of vertices, we call P = x0 . . . xk an A–B path if A–B path V (P ) ∩ A = {x0} and V (P ) ∩ B = {xk}. As before, we write a–B path
rather than {a}–B path, etc. Two or more paths are independent if inde
pendent
none of them contains an inner vertex of another. Two a–b paths, for instance, are independent if and only if a and b are their only common vertices. Given a graph H, we call P an H- path if P is non-trivial and meets H- path H exactly in its ends. In particular, the edge of any H-path of length 1 is never an edge of H.


8 1. The Basics
If P = x0 . . . xk−1 is a path and k 3, then the graph C := cycle P + xk−1x0 is called a cycle. As with paths, we often denote a cycle by its (cyclic) sequence of vertices; the above cycle C might be written length as x0 . . . xk−1x0. The length of a cycle is its number of edges (or vertices); Ck the cycle of length k is called a k-cycle and denoted by Ck. girth g(G) The minimum length of a cycle (contained) in a graph G is the girth g(G) of G; the maximum length of a cycle in G is its circumference. (If
circum
ference G does not contain a cycle, we set the former to ∞, the latter to zero.) chord An edge which joins two vertices of a cycle but is not itself an edge of the cycle is a chord of that cycle. Thus, an induced cycle in G, a cycle in G forming an induced subgraph, is one that has no chords (Fig. 1.3.3).
induced cycle
y
x
Fig. 1.3.3. A cycle C8 with chord xy, and induced cycles C6, C4
If a graph has large minimum degree, it contains long paths and cycles (see also Exercise 9):
Proposition 1.3.1. Every graph G contains a path of length δ(G) and
[1.4.3]
[7.2.2] a cycle of length at least δ(G) + 1 (provided that δ(G) 2).
Proof. Let x0 . . . xk be a longest path in G. Then all the neighbours of xk lie on this path (Fig. 1.3.4). Hence k d(xk) δ(G). If i < k is minimal with xixk ∈ E(G), then xi . . . xkxi is a cycle of length at least δ(G) + 1.
x0 xi xk
Fig. 1.3.4. A longest path x0 . . . xk, and the neighbours of xk
Minimum degree and girth, on the other hand, are not related (unless we fix the number of vertices): as we shall see in Chapter 11, there are graphs combining arbitrarily large minimum degree with arbitrarily large girth. The distance dG(x, y) in G of two vertices x, y is the length of a
distance
d(x, y) shortest x–y path in G; if no such path exists, we set d(x, y) := ∞. The greatest distance between any two vertices in G is the diameter of G, denoted by diam(G). Diameter and girth are, of course, related:
diameter diam(G)


1.3 Paths and cycles 9
Proposition 1.3.2. Every graph G containing a cycle satisfies g(G) 2 diam(G) + 1.
Proof. Let C be a shortest cycle in G. If g(G) 2 diam(G) + 2, then C has two vertices whose distance in C is at least diam(G) + 1. In G, these vertices have a lesser distance; any shortest path P between them is therefore not a subgraph of C. Thus, P contains a C-path xP y. Together with the shorter of the two x–y paths in C, this path xP y forms a shorter cycle than C, a contradiction.
A vertex is central in G if its greatest distance from any other ver- central tex is as small as possible. This distance is the radius of G, denoted
by rad(G). Thus, formally, rad(G) = minx∈V (G) maxy∈V (G) dG(x, y). radius
rad(G)
As one easily checks (exercise), we have
rad(G) diam(G) 2 rad(G) .
Diameter and radius are not related to minimum, average or maximum degree if we say nothing about the order of the graph. However, graphs of large diameter and minimum degree must be large (larger than forced by each of the two parameters alone; see Exercise 10), and graphs of small diameter and maximum degree must be small:
Proposition 1.3.3. A graph G of radius at most k and maximum degree [9.4.1]
[9.4.2]
at most d 3 has fewer than d
d−2 (d − 1)k vertices.
Proof. Let z be a central vertex in G, and let Di denote the set of vertices
of G at distance i from z. Then V (G) = ⋃k
i=0 Di. Clearly |D0| = 1 and
|D1| d. For i 1 we have |Di+1| (d − 1)|Di|, because every vertex in Di+1 is a neighbour of a vertex in Di (why?), and each vertex in Di has at most d − 1 neighbours in Di+1 (since it has another neighbour in Di−1). Thus |Di+1| d(d − 1)i for all i < k by induction, giving
|G| 1 + d
k−1
∑
i=0
(d − 1)i = 1 + d
d−2
((d − 1)k − 1) < d
d − 2 (d − 1)k.
Similarly, we can bound the order of G from below by assuming that both its minimum degree and girth are large. For d ∈ R and g ∈ N let
n0(d, g) :=
⎧⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎩
1+d
r−1
∑
i=0
(d − 1)i if g =: 2r + 1 is odd;
2
r−1
∑
i=0
(d − 1)i if g =: 2r is even.


10 1. The Basics
It is not difficult to prove that a graph of minimum degree δ and girth g has at least n0(δ, g) vertices (Exercise 7). Interestingly, one can obtain the same bound for its average degree:
Theorem 1.3.4. (Alon, Hoory & Linial 2002)
Let G be a graph. If d(G) d 2 and g(G) g ∈ N then |G| n0(d, g).
One aspect of Theorem 1.3.4 is that it guarantees the existence of a short cycle compared with |G|. Using just the easy minimum degree version of Exercise 7, we get the following rather general bound:
[2.3.1] Corollary 1.3.5. If δ(G) 3 then g(G) < 2 log |G|.
Proof. If g := g(G) is even then
n0(3, g) = 2 2g/2 − 1
2 − 1 = 2g/2 + (2g/2 − 2) > 2g/2,
while if g is odd then
n0(3, g) = 1 + 3 2(g−1)/2 − 1
2 − 1 = √32 2g/2 − 2 > 2g/2.
As |G| n0(3, g), the result follows.
walk A walk (of length k) in a graph G is a non-empty alternating sequence v0e0v1e1 . . . ek−1vk of vertices and edges in G such that ei = {vi, vi+1} for all i < k. If v0 = vk, the walk is closed . If the vertices in a walk are all distinct, it defines an obvious path in G. In general, every walk between two vertices contains4 a path between these vertices (proof ?).
1.4 Connectivity
connected A graph G is called connected if it is non-empty and any two of its vertices are linked by a path in G. If U ⊆ V (G) and G[U ] is connected, we also call U itself connected (in G). Instead of ‘not connected’ we usually say ‘disconnected’.
[1.5.2] Proposition 1.4.1. The vertices of a connected graph G can always be enumerated, say as v1, . . . , vn, so that Gi := G[v1, . . . , vi] is connected for every i.
4 We shall often use terms defined for graphs also for walks, as long as their meaning is obvious.


1.4 Connectivity 11
Proof. Pick any vertex as v1, and assume inductively that v1, . . . , vi have been chosen for some i < |G|. Now pick a vertex v ∈ G − Gi. As G is connected, it contains a v–v1 path P . Choose as vi+1 the last vertex of P in G − Gi; then vi+1 has a neighbour in Gi. The connectedness of every Gi follows by induction on i.
Let G = (V, E) be a graph. A maximal connected subgraph of G is a component of G. Clearly, the components are induced subgraphs, and component their vertex sets partition V . Since connected graphs are non-empty, the empty graph has no components.
Fig. 1.4.1. A graph with three components, and a minimal spanning connected subgraph in each component
If A, B ⊆ V and X ⊆ V ∪ E are such that every A–B path in G contains a vertex or an edge from X, we say that X separates the sets A separate and B in G. Note that this implies A ∩ B ⊆ X. We say that X separates two vertices a, b if it separates the sets {a}, {b} but a, b ∈/ X, and that X separates G if X separates some two vertices in G. A separating set of vertices is a separator . Separating sets of edges have no generic name, separator but some such sets do; see Section 1.9 for the definition of cuts and bonds. A vertex which separates two other vertices of the same component is a cutvertex cutvertex , and an edge separating its ends is a bridge. Thus, the bridges bridge in a graph are precisely those edges that do not lie on any cycle.
vw e
xy
Fig. 1.4.2. A graph with cutvertices v, x, y, w and bridge e = xy
The unordered pair {A, B} is a separation of G if A ∪ B = V and G separation has no edge between A B and B A. Clearly, the latter is equivalent to saying that A ∩ B separates A from B. If both A B and B A are non-empty, the separation is proper . The number |A ∩ B| is the order of the separation {A, B}; the sets A, B are its sides. G is called k-connected (for k ∈ N) if |G| > k and G − X is connected k-connected for every set X ⊆ V with |X| < k. In other words, no two vertices of G


12 1. The Basics
are separated by fewer than k other vertices. Every (non-empty) graph is 0-connected, and the 1-connected graphs are precisely the non-trivial connected graphs. The greatest integer k such that G is k-connected is the connectivity κ(G) of G. Thus, κ(G) = 0 if and only if G is
connectivity
κ(G) disconnected or a K1, and κ(Kn) = n − 1 for all n 1. If |G| > 1 and G − F is connected for every set F ⊆ E of fewer than edges, then G is called -edge-connected. The greatest integer
-edge
connected such that G is -edge-connected is the edge-connectivity λ(G) of G. In particular, we have λ(G) = 0 if G is disconnected.
edgeconnectivity λ(G)
GH
Fig. 1.4.3. The octahedron G (left) with κ(G) = λ(G) = 4, and a graph H with κ(H) = 2 but λ(H) = 4
[3.2.1] Proposition 1.4.2. If G is non-trivial then κ(G) λ(G) δ(G).
Proof. The second inequality follows from the fact that all the edges incident with a fixed vertex separate G. To prove the first, let F be a set of λ(G) edges such that G − F is disconnected. Such a set exists by definition of λ; note that F is a minimal separating set of edges in G. We show that κ(G) |F |. Suppose first that G has a vertex v that is not incident with an edge in F . Let C be the component of G − F containing v. Then the vertices of C that are incident with an edge in F separate v from G − C. Since no edge in F has both ends in C (by the minimality of F ), there are at most |F | such vertices, giving κ(G) |F | as desired. Suppose now that every vertex is incident with an edge in F . Let v be any vertex, and let C be the component of G − F containing v. Then the neighbours w of v with vw ∈/ F lie in C and are incident with distinct edges in F (again by the minimality of F ), giving dG(v) |F |. As NG(v) separates v from any other vertices in G, this yields κ(G) |F |unless there are no other vertices, i.e. unless {v} ∪ N (v) = V . But v was an arbitrary vertex. So we may assume that G is complete, giving κ(G) = λ(G) = |G| − 1.
By Proposition 1.4.2, high connectivity requires a large minimum degree. Conversely, large minimum degree does not ensure high connectivity, not even high edge-connectivity (examples?). It does, however, imply the existence of a highly connected subgraph:


1.4 Connectivity 13
Theorem 1.4.3. (Mader 1972) [7.2.3]
[11.2.3]
Let 0 = k ∈ N. Every graph G with d(G) 4k has a (k + 1)-connected subgraph H such that ε(H) > ε(G) − k.
Proof. Put γ := ε(G) ( 2k), and consider the subgraphs G′ ⊆ G such
(1.2.2) (1.3.1) γ
that
|G′| 2k and ‖G′‖ > γ (|G′| − k) . (∗)
Such graphs G′ exist since G is one; let H be one of smallest order. H No graph G′ as in (∗) can have order exactly 2k, since this would
imply that ‖G′‖ > γk 2k2 > (|G′|
2
). The minimality of H therefore implies that δ(H) > γ : otherwise we could delete a vertex of degree at most γ and obtain a graph G′ H still satisfying (∗). In particular, we have |H| γ. Dividing the inequality of ‖H‖ > γ |H| − γk from (∗) by |H| therefore yields ε(H) > γ − k, as desired. It remains to show that H is (k + 1)-connected. If not, then H has a proper separation {U1, U2} of order at most k; put H[Ui] =: Hi. H1, H2 Since any vertex v ∈ U1 U2 has all its d(v) δ(H) > γ neighbours from H in H1, we have |H1| γ 2k. Similarly, |H2| 2k. As by the minimality of H neither H1 nor H2 satisfies (∗), we further have
‖Hi‖ γ (|Hi| − k)
for i = 1, 2. But then
‖H‖ ‖H1‖ + ‖H2‖
γ (|H1| + |H2| − 2k)
γ (|H| − k) (as |H1 ∩ H2| k),
which contradicts (∗) for H.
1.5 Trees and forests
An acyclic graph, one not containing any cycles, is called a forest. A con- forest nected forest is called a tree. (Thus, a forest is a graph whose components tree are trees.) The vertices of degree 1 in a tree are its leaves,5 the others leaf are its inner vertices. Every non-trivial tree has a leaf—consider, for example, the ends of a longest path. This little fact often comes in handy, especially in induction proofs about trees: if we remove a leaf from a tree, what remains is still a tree.
5 . . . except that the root of a tree (see below) is never called a leaf, even if it has degree 1.


14 1. The Basics
Fig. 1.5.1. A tree
Theorem 1.5.1. The following assertions are equivalent for a graph T :
[1.6.1] [1.9.5]
[4.2.9] (i) T is a tree;
(ii) Any two vertices of T are linked by a unique path in T ;
(iii) T is minimally connected, i.e. T is connected but T − e is disconnected for every edge e ∈ T ;
(iv) T is maximally acyclic, i.e. T contains no cycle but T + xy does, for any two non-adjacent vertices x, y ∈ T .
The proof of Theorem 1.5.1 is straightforward, and a good exercise for anyone not yet familiar with all the notions it relates. Extending our xT y notation for paths from Section 1.3, we write xT y for the unique path in a tree T between two vertices x, y (see (ii) above). A common application of Theorem 1.5.1 is that every connected graph contains a spanning tree: take a minimal connected spanning subgraph and use (iii), or take a maximal acyclic subgraph and apply (iv). Figure 1.4.1 shows a spanning tree in each of the three components of the graph depicted. When T is a spanning tree of G, the edges in chord E(G) E(T ) are the chords of T in G.
Corollary 1.5.2. The vertices of a tree can always be enumerated, say as v1, . . . , vn, so that every vi with i 2 has a unique neighbour in {v1, . . . , vi−1}.
(1.4.1) Proof. Use the enumeration from Proposition 1.4.1.
Corollary 1.5.3. A connected graph with n vertices is a tree if and
[1.9.5] [2.4.4]
[4.2.9] only if it has n − 1 edges.
Proof. Induction on i shows that the subgraph spanned by the first i vertices in Corollary 1.5.2 has i − 1 edges; for i = n this proves the forward implication. Conversely, let G be any connected graph with n vertices and n − 1 edges. Let G′ be a spanning tree in G. Since G′ has n − 1 edges by the first implication, it follows that G = G′.


1.5 Trees and forests 15
Corollary 1.5.4. If T is a tree and G is any graph with δ(G) |T | − 1, [9.2.1]
[9.2.3]
then T ⊆ G, i.e. G has a subgraph isomorphic to T .
Proof. Find a copy of T in G inductively along its vertex enumeration from Corollary 1.5.2.
Sometimes it is convenient to consider one vertex of a tree as special; such a vertex is then called the root of this tree. A tree T with a fixed root root r is a rooted tree. Writing x y for x ∈ rT y then defines a partial ordering on V (T ), the tree-order associated with T and r. We shall tree-order think of this ordering as expressing ‘height’: if x < y we say that x lies
below y in T , we call up/above
down/below
y := { x | x y } and x := { y | y x } t , t
the down-closure of y and the up-closure of x, and so on. A set X ⊆ V (T ) down-closure
up-closure
that equals its up-closure, i.e. which satisfies X = X := ⋃
x∈X x , is closed upwards, or an up-set in T . Similarly, there are down-closed sets, or down-sets etc..
Note that the root of T is the least element in its tree-order, the leaves are its maximal elements, the ends of any edge of T are comparable, and the down-closure of every vertex is a chain, a set of pairwise chain comparable elements. (Proofs?) The vertices at distance k from the root have height k and form the kth level of T . height, level A rooted tree T contained in a graph G is called normal in G if normal tree the ends of every T -path in G are comparable in the tree-order of T . If T spans G, this amounts to requiring that two vertices of T must be comparable whenever they are adjacent in G; see Figure 1.5.2.
r
G
T
Fig. 1.5.2. A normal spanning tree with root r
A normal tree T in G can be a powerful tool for examining the structure of G, because G reflects the separation properties of T :


16 1. The Basics
Lemma 1.5.5. Let T be a normal tree in G.
[8.2.3] [8.6.8]
(i) Any two vertices x, y ∈ T are separated in G by the set x ∩ y .
(ii) If S ⊆ V (T ) = V (G) and S is down-closed, then the components of G − S are spanned by the sets x with x minimal in T − S.
Proof. (i) Let P be any x–y path in G; we show that P meets x ∩ y . Let t1, . . . , tn be a minimal sequence of vertices in P ∩ T such that t1 = x and tn = y and ti and ti+1 are comparable in the tree-order of T for all i. (Such a sequence exists: the set of all vertices in P ∩ T , in their natural order as they occur on P , has this property because T is normal and every segment tiP ti+1 is either an edge of T or a T - path.) In our minimal sequence we cannot have ti−1 < ti > ti+1 for any i, since ti−1 and ti+1 would then be comparable, and deleting ti would yield a smaller such sequence. Thus, our sequence has the form
x = t1 > . . . > tk < . . . < tn = y
for some k ∈ {1, . . . , n}. As tk ∈ x ∩ y ∩ V (P ), our proof is complete. (ii) Consider a component C of G − S, and let x be a minimal element of its vertex set. Then V (C) has no other minimal element x′: as x and x′ would be incomparable, any x–x′ path in C would by (i) contain a vertex below both, contradicting their minimality in V (C). Hence as every vertex of C lies above some minimal element of V (C), it lies above x. Conversely, every vertex y ∈ x lies in C, for since S is down-closed, the ascending path xT y lies in T − S. Thus, V (C) = x . Let us show that x is minimal not only in V (C) but also in T − S. The vertices below x form a chain t in T . As t is a neighbour of x, the maximality of C as a component of G − S implies that t ∈ S, giving t ⊆ S since S is down-closed. This completes the proof that every component of G − S is spanned by a set x with x minimal in T − S. Conversely, if x is any minimal element of T − S, it is clearly also minimal in the component C of G − S to which it belongs. Then V (C) = x as before, i.e., x spans this component.
Normal spanning trees are also called depth-first search trees, because of the way they arise in computer searches on graphs (Exercise 26). This fact is often used to prove their existence, which can also be shown by a very short and clever induction (Exercise 25). The following constructive proof, however, illuminates better how normal trees capture the structure of their host graphs.
Proposition 1.5.6. Every connected graph contains a normal spanning
[6.5.3]
[8.2.4] tree, with any specified vertex as its root.


1.5 Trees and forests 17
Proof. Let G be a connected graph and r ∈ G any specified vertex. Let T be a maximal normal tree with root r in G; we show that V (T ) = V (G). Suppose not, and let C be a component of G − T . As T is normal, N (C) is a chain in T . Let x be its greatest element, and let y ∈ C be adjacent to x. Let T ′ be the tree obtained from T by joining y to x; the tree-order of T ′ then extends that of T . We shall derive a contradiction by showing that T ′ is also normal in G. Let P be a T ′-path in G. If the ends of P both lie in T , then they are comparable in the tree-order of T (and hence in that of T ′), because then P is also a T - path and T is normal in G by assumption. If not, then y is one end of P , so P lies in C except for its other end z, which lies in N (C). Then z x, by the choice of x. For our proof that y and z are comparable it thus suffices to show that x < y, i.e. that x ∈ rT ′y. This, however, is clear since y is a leaf of T ′ with neighbour x.
1.6 Bipartite graphs
Let r 2 be an integer. A graph G = (V, E) is called r-partite if r-partite V admits a partition into r classes such that every edge has its ends in different classes: vertices in the same partition class must not be adjacent. Instead of ‘2-partite’ one usually says bipartite. bipartite
K2,2,2 = K23
Fig. 1.6.1. Two 3-partite graphs
An r-partite graph in which every two vertices from different par
tition classes are adjacent is called complete; the complete r-partite complete
r-partite
graphs for all r together are the complete multipartite graphs. The complete r-partite graph Kn1 ∗ . . . ∗ Knr is denoted by Kn1,...,nr ; if Kn1,...,nr
n1 = . . . = nr =: s, we abbreviate this to Ksr. Thus, Ksr is the complete Ksr r-partite graph in which every partition class contains exactly s vertices.6 (Figure 1.6.1 shows the example of the octahedron K23; compare its drawing with that in Figure 1.4.3.) Graphs of the form K1,n are
6 Note that we obtain a Ksr if we replace each vertex of a Kr by an independent
s-set; our notation of Ksr is intended to hint at this connection.


18 1. The Basics
==
Fig. 1.6.2. Three drawings of the bipartite graph K3,3 = K32
star called stars; the vertex in the singleton partition class of this K1,n is the centre star’s centre.
odd cycle Clearly, a bipartite graph cannot contain an odd cycle, a cycle of odd length. In fact, the bipartite graphs are characterized by this property:
Proposition 1.6.1. A graph is bipartite if and only if it contains no
[1.9.4] [5.3.1]
[6.4.2] odd cycle.
(1.5.1) Proof. Let G = (V, E) be a graph without odd cycles; we show that G is bipartite. Clearly a graph is bipartite if all its components are bipartite or trivial, so we may assume that G is connected. Let T be a spanning tree in G, pick a root r ∈ T , and denote the associated tree-order on V by T . For each v ∈ V , the unique path rT v has odd or even length. This defines a bipartition of V ; we show that G is bipartite with this partition.
e
Ce
r
x
y
Fig. 1.6.3. The cycle Ce in T + e
Let e = xy be an edge of G. If e ∈ T , with x <T y say, then rT y = rT xy and so x and y lie in different partition classes. If e ∈/ T then Ce := xT y + e is a cycle (Fig. 1.6.3), and by the case treated already the vertices along xT y alternate between the two classes. Since Ce is even by assumption, x and y again lie in different classes.


1.7 Contraction and minors 19
1.7 Contraction and minors
In Section 1.1 we saw two fundamental containment relations between graphs: the ‘subgraph’ relation, and the ‘induced subgraph’ relation. In this section we meet two more: the ‘minor’ relation, and the ‘topological minor’ relation. Let X be a fixed graph. A subdivision of X is, informally, any graph obtained from X by ‘subdividing’ some or all of its edges by drawing new vertices on those
edges. In other words, we replace some edges of X with new paths subdivision
T X of X
between their ends, so that none of these paths has an inner vertex in V (X) or on another new path. When G is a subdivision of X, we also
say that G is a T X.7 The original vertices of X are the branch vertices branch
vertices
of the T X; its new vertices are called subdividing vertices. Note that subdividing vertices have degree 2, while branch vertices retain their degree from X. If a graph Y contains a T X as a subgraph, then X is a topological
minor of Y (Fig. 1.7.1). topological
minor
XG Y
Fig. 1.7.1. The graph G is a T X, a subdivision of X. As G ⊆ Y , this makes X a topological minor of Y .
Similarly, replacing the vertices x of X with disjoint connected graphs Gx, and the edges xy of X with non-empty sets of Gx– Gy edges,
yields a graph that we shall call an IX.8 More formally, a graph G is an IX if its vertex set admits a partition { Vx | x ∈ V (X) } into con- IX nected subsets Vx such that distinct vertices x, y ∈ X are adjacent in X if and only if G contains a Vx–Vy edge. The sets Vx are the branch sets branch sets of the IX. Conversely, we say that X arises from G by contracting the subgraphs Gx and call it a contraction minor of Y . contraction If a graph Y contains an IX as a subgraph, then X is a minor of Y, minor, the IX is a model of X in Y, and we write X Y (Fig. 1.7.2). model
7 The ‘T ’ stands for ‘topological’. Although, formally, T X denotes a whole class of graphs, the class of all subdivisions of X, it is customary to use the expression as indicated to refer to an arbitrary member of that class.
8 The ‘I’ stands for ‘inflated’. As before, while IX is formally a class of graphs, those admitting a vertex partition { Vx | x ∈ V (X) } as described below, we use the expression as indicated to refer to an arbitrary member of that class.


20 1. The Basics
Thus, X is a minor of Y if and only if there is a map φ from a subset of V (Y ) onto V (X) such that for every vertex x ∈ X its inverse image φ−1(x) is connected in Y and for every edge xx′ ∈ X there is an edge in Y between the branch sets φ−1(x) and φ−1(x′) of its ends. If the domain of φ is all of V (Y ), and xx′ ∈ X whenever x = x′ and Y has an edge between φ−1(x) and φ−1(x′) (so that Y is an IX), we call φ a contraction contraction of Y onto X.
Since branch sets can be singletons, every subgraph of a graph is also its minor. In infinite graphs, branch sets are allowed to be infinite. For example, the graph shown in Figure 8.1.1 is an IX with X an infinite star.
X
Y
Vx
Vz
x
z
G
Fig. 1.7.2. The graph G is a model of X in Y, which makes X a minor of Y.
[12.6.1] Proposition 1.7.1. The minor relation and the topological-minor relation are partial orderings on the class of finite graphs, i.e. they are reflexive, antisymmetric and transitive.
If G is an IX, then P = { Vx | x ∈ X } is a partition of V (G), and we G/P write X =: G/P for this contraction minor of G. If U = Vx is the only G/U non-singleton branch set, we write X =: G/U , write vU for the vertex vU x ∈ X to which U contracts, and think of the rest of X as an induced subgraph of G. The ‘smallest’ non-trivial case of this is that U contains exactly two vertices forming an edge e, so that U = e. We then say that X = G/e arises from G by contracting the edge e; see Figure 1.7.3.
contracting an edge
x
y
e ve
G/e
G
Fig. 1.7.3. Contracting the edge e = xy


1.7 Contraction and minors 21
Since the minor relation is transitive, every sequence of single vertex or edge deletions or contractions yields a minor. Conversely, every minor of a given finite graph can be obtained in this way:
Corollary 1.7.2. Let X and Y be finite graphs. X is a minor of Y if and only if there are graphs G0, . . . , Gn such that G0 = Y and Gn = X and each Gi+1 arises from Gi by deleting an edge, contracting an edge, or deleting a vertex.
Proof. Induction on |Y | + ‖Y ‖.
Finally, we have the following relationship between minors and topological minors:
Proposition 1.7.3. [4.4.2]
[7.3.1] [12.7.3]
(i) Every T X is also an IX (Fig. 1.7.4); thus, every topological minor of a graph is also its (ordinary) minor.
(ii) If Δ(X) 3, then every IX contains a T X; thus, every minor with maximum degree at most 3 of a graph is also its topological minor.
Fig. 1.7.4. A subdivision of K4 viewed as an IK4
Now that we have met all the standard relations between graphs, we can also define what it means to embed one graph in another. Basically, an embedding of G in H is an injective map φ: V (G) → V (H) that embedding preserves the kind of structure we are interested in. Thus, φ embeds G in H ‘as a subgraph’ if it preserves the adjacency of vertices, and ‘as an induced subgraph’ if it preserves both adjacency and non-adjacency. If φ is defined on E(G) as well as on V (G) and maps the edges xy of G to independent paths in H between φ(x) and φ(y), it embeds G in H ‘as a topological minor’. Similarly, an embedding φ of G in H ‘as a minor’ would be a map from V (G) to disjoint connected vertex sets in H (rather than to single vertices) so that H has an edge between the sets φ(x) and φ(y) whenever xy is an edge of G. Further variants are possible; depending on the context, one may wish to define embeddings ‘as a spanning subgraph’, ‘as an induced minor’ and so on, in the obvious way.


22 1. The Basics
1.8 Euler tours
Any mathematician who happens to find himself in the East Prussian city of Ko ̈nigsberg (and in the 18th century) will lose no time to follow the great Leonhard Euler’s example and inquire about a round trip through the old city that traverses each of the bridges shown in Figure 1.8.1 exactly once.
Fig. 1.8.1. The bridges of Ko ̈nigsberg (anno 1736)
Thus inspired,9 let us call a closed walk in a graph an Euler tour if Eulerian it traverses every edge of the graph exactly once. A graph is Eulerian if it admits an Euler tour.
Fig. 1.8.2. A graph formalizing the bridge problem
Theorem 1.8.1. (Euler 1736)
[2.1.5]
[10.3.1] A connected graph is Eulerian if and only if every vertex has even degree.
9 Anyone to whom such inspiration seems far-fetched, even after contemplating Figure 1.8.2, may seek consolation in the multigraph of Figure 1.10.1.


1.8 Euler tours 23
Proof. The degree condition is clearly necessary: a vertex appearing k times in an Euler tour (or k + 1 times, if it is the starting and finishing vertex and as such counted twice) must have degree 2k. Conversely, we show by induction on ‖G‖ that every connected graph G with all degrees even has an Euler tour. The induction starts trivially with ‖G‖ = 0. Now let ‖G‖ 1. Since all degrees are even, we can find in G a non-trivial closed walk that contains no edge more than once. (How exactly?) Let W be such a walk of maximal length, and write F for the set of its edges. If F = E(G), then W is an Euler tour. Suppose, therefore, that G′ := G − F has an edge. For every vertex v ∈ G, an even number of the edges of G at v lies in F , so the degrees of G′ are again all even. Since G is connected, G′ has an edge e incident with a vertex on W . By the induction hypothesis, the component C of G′ containing e has an Euler tour. Concatenating this with W (suitably re-indexed), we obtain a closed walk in G that contradicts the maximal length of W .
1.9 Some linear algebra
Let G = (V, E) be a graph with n vertices and m edges, say V =
[8.7]
G = (V, E) {v1, . . . , vn} and E = {e1, . . . , em}. The vertex space V(G) of G is the
vector space over the 2-element field F2 = {0, 1} of all functions V → F2. vertex
space V(G)
Every element of V(G) corresponds naturally to a subset of V , the set of those vertices to which it assigns a 1, and every subset of V is uniquely represented in V(G) by its indicator function. We may thus think of V(G) as the power set of V made into a vector space: the sum U + U ′ + of two vertex sets U, U ′ ⊆ V is their symmetric difference (why?), and U = −U for all U ⊆ V . The zero in V(G), viewed in this way, is the empty (vertex) set ∅. Since {{v1}, . . . , {vn}} is a basis of V(G), its standard basis, we have dim V(G) = n.
In the same way as above, the functions E → F2 form the edge space
E(G) of G: its elements correspond to the subsets of E, vector addition edge space
E (G)
amounts to symmetric difference, ∅ ⊆ E is the zero, and F = −F for all
F ⊆ E. As before, {{e1}, . . . , {em}} is the standard basis of E(G), and standard
basis
dim E(G) = m. Given two elements F, F ′ of the edge space, viewed as functions E → F2, we write
〈F, F ′〉 := ∑
e∈E
F (e)F ′(e) ∈ F2 .
〈F, F ′〉
This is zero if and only if F and F ′ have an even number of edges in common; in particular, we can have 〈F, F 〉 = 0 with F = ∅. Given a


24 1. The Basics
subspace F of E(G), we write
F⊥ F ⊥ := { D ∈ E(G) | 〈F, D〉 = 0 for all F ∈ F } .
This is again a subspace of E(G) (the space of all vectors solving a certain set of linear equations—which?), and one can show that
dim F + dim F⊥ = m .
The cycle space C = C(G) is the subspace of E(G) spanned by all
cycle space
C(G) the cycles in G—more precisely, by their edge sets.10 The dimension of C(G) is sometimes called the cyclomatic number of G. The elements of C are easily recognized by the degrees of the subgraphs they form. Moreover, to generate the cycle space from cycles we only need disjoint unions rather than arbitrary symmetric differences:
Proposition 1.9.1. The following assertions are equivalent for edge sets
[4.5.1] [8.7.3] D ⊆ E:
(i) D ∈ C(G);
(ii) D is a (possibly empty) disjoint union of edge sets of cycles in G; (iii) All vertex degrees of the graph (V, D) are even.
Proof. Since cycles have even degrees and taking symmetric differences preserves this, (i)→(iii) follows by induction on the number of cycles used to generate D. The implication (iii)→(ii) follows by induction on |D|: if D = ∅ then (V, D) contains a cycle C, whose edges we delete for the induction step. The implication (ii)→(i) is immediate from the definition of C(G).
cut A set F of edges is a cut in G if there exists a partition11 {V1, V2} of V such that F = E(V1, V2). The edges in F are said to cross this partition. The sets V1, V2 are the sides of the cut. Recall that for V1 = {v} this cut is denoted by E(v). A minimal non-empty cut in G is bond a bond .
[4.6.3] Proposition 1.9.2. Together with ∅, the cuts in G form a subspace B = B(G) of E(G). This space is generated by cuts of the form E(v).
Proof. Let B denote the subspace of E(G) generated by the cuts of the form E(v). Every cut of G, with vertex partition {V1, V2} say, equals
∑
v∈V1 E(v) and hence lies in B. Conversely, every set ∑
u∈U E(u) ∈ B
is either empty, e.g. if U ∈ {∅, V }, or it is the cut E(U, V U ).
10 For simplicity, we shall not always distinguish between the edge sets F ∈ E(G) and the subgraphs (V, F ) they induce in G. When we wish to be more precise, such as in Chapter 8.6, we shall use the word ‘circuit’ for the edge set of a cycle. 11 Recall that partition classes in this book are non-empty. The empty set of edges, therefore, is a cut only if the graph is disconnected.


1.9 Some linear algebra 25
The space B from Proposition 1.9.2 is the cut space, or bond space,
of G. It is not difficult to find among the cuts E(v) an explicit basis cut space
B(G)
for B, and thus to determine its dimension (Exercise 40). Note that the bonds are for B what cycles are for C: the minimal non-empty elements. The ‘non-empty’ condition in the definition of a bond bites only if G is disconnected. If G is connected, its bonds are just its minimal cuts, and these are easy to recognize: a cut in a connected graph is minimal if and only if both sides of the corresponding vertex partition induce connected subgraphs (Exercise 36). If G is disconnected, its bonds are the minimal cuts of its components. In analogy to Proposition 1.9.1, bonds and disjoint unions suffice to generate the cut space:
Lemma 1.9.3. Every cut is a disjoint union of bonds. [4.6.2]
[6.5.2] Proof. We apply induction on the size of the cut F considered. For F = ∅ the assertion is trivial (with the empty union). If F = ∅ is not itself a bond, it properly contains some other non-empty cut F ′. By Proposition 1.9.2, also F F ′ = F + F ′ is a smaller non-empty cut. By the induction hypothesis, both F ′ and F F ′ are disjoint unions of bonds, and hence so is F .
Exercise 39 indicates how to construct the bonds for Lemma 1.9.3 explicitly. In Chapter 3.1 we shall prove some more details about the possible positions of the cycles and bonds of a graph within its overall structure (Lemmas 3.1.2 and 3.1.3).
Theorem 1.9.4. The cycle space C and the cut space B of any graph [4.6] satisfy
C = B⊥ and B = C⊥ .
Proof. Consider a graph G = (V, E). Clearly, any cycle in G has an (1.6.1)
(1.10)
even number of edges in each cut. This implies C ⊆ B⊥ and B ⊆ C⊥. To prove B⊥ ⊆ C, recall from Proposition 1.9.1 that for every edge set F ∈/ C there exists a vertex v incident with an odd number of edges in F . Then 〈E(v), F 〉 = 1, so E(v) ∈ B implies F ∈/ B⊥. This completes the proof of C = B⊥. To prove C⊥ ⊆ B, let F ∈ C⊥ be given. Consider the multigraph12 H obtained from G by contracting the edges in E F . Any cycle in H has all its edges in F . Since we can extend it to a cycle in G by edges from E F , the number of these edges must be even. Hence H is bipartite, by Proposition 1.6.1. Its bipartition induces a bipartition (V1, V2) of V such that E(V1, V2) = F , showing F ∈ B as desired.
12 See Section 1.10: such contractions might create loops in F , but bipartite multigraphs have no loops. The proof of Proposition 1.6.1 works for multigraphs too.


26 1. The Basics
Consider a connected graph G = (V, E) with a spanning tree T ⊆ G. For every chord e ∈ E E(T ) there is a unique cycle Ce in T + e, the fundamental cycle of e with respect to T . Similarly, for every edge f ∈ T
fundamental
cycle/cut the forest T − f has exactly two components (Theorem 1.5.1 (iii)). The (1.5.1) set Df ⊆ E of edges of G between these components is a bond in G, the fundamental cut of f with respect to T . Notice that f ∈ Ce if and only if e ∈ Df , for all edges e ∈/ T and f ∈ T . This is an indication of some deeper duality, which the following theorem explores further.
f
e
Ce
Df
T
T
Fig. 1.9.1. The fundamental cycle Ce, and the fundamental cut Df
[4.5.1] Theorem 1.9.5. Let G be a connected graph with n vertices and m edges, and let T ⊆ G a spanning tree.
(i) The fundamental cuts and cycles of G with respect to T form bases of B(G) and C(G), respectively.
(ii) Hence, dim B(G) = n − 1 and dim C(G) = m − n + 1.
(1.5.3) Proof. (i) Note that an edge f ∈ T lies in Df but in no other fundamental cut, while an edge e ∈/ T lies in Ce but in no other fundamental cycle. Hence the fundamental cuts and cycles form linearly independent sets in B = B(G) and C = C(G), respectively. Let us show that the fundamental cycles generate every cycle C. By
our initial observation, D := C + ∑
e∈C T Ce is an element of C that contains no edge outside T . But by Proposition 1.9.1, the only element
of C contained in T is ∅. So D = ∅, giving C = ∑
e∈C T Ce.
Similarly, every cut D is a sum of fundamental cuts. Indeed, the
element D + ∑
f ∈D∩T Df of B contains no edge of T . As ∅ is the only
element of B missing T , this implies D = ∑
f ∈D∩T Df .
(ii) By (i), the fundamental cuts and cycles form bases of B and C. As there are n − 1 fundamental cuts (Corollary 1.5.3), there are m − n + 1 fundamental cycles.


1.9 Some linear algebra 27
The incidence matrix B = (bij)n×m of a graph G = (V, E) with incidence
matrix
V = {v1, . . . , vn} and E = {e1, . . . , em} is defined over F2 by
bij :=
{ 1 if vi ∈ ej 0 otherwise.
As usual, let Bt denote the transpose of B. Then B and Bt define linear maps B: E(G) → V(G) and Bt: V(G) → E(G) with respect to the standard bases. As is easy to check, B maps an edge set F ⊆ E to the set of vertices incident with an odd number of edges in F , while Bt maps a set U ⊆ V to set of edges with exactly one end in U . In particular:
Proposition 1.9.6.
(i) The kernel of B is C(G).
(ii) The image of Bt is B(G).
More on this in the exercises and notes at the end of this chapter.
The adjacency matrix A = (aij)n×n of G is defined by adjacency
matrix
aij :=
{ 1 if vivj ∈ E 0 otherwise.
Viewed as a linear map V → V, the adjacency matrix maps a given set U ⊆ V to the set of vertices with an odd number of neighbours in U . Let D denote the real diagonal matrix (dij)n×n with dii = d(vi) and dij = 0 otherwise. Our last proposition establishes a connection between A and B (now viewed as real matrices), which can be verified simply from the definition of matrix multiplication:
Proposition 1.9.7. BBt = A + D.
It is also instructive to check that A + D, with entries taken mod 2, defines the same map V → V as the composition of the maps of B and Bt (Exercise 48).
1.10 Other notions of graphs
For completeness, we now mention a few other notions of graphs which feature less frequently or not at all in this book. A hypergraph is a pair (V, E) of disjoint sets, where the elements hypergraph of E are non-empty subsets (of any cardinality) of V . Thus, graphs are special hypergraphs.
A directed graph (or digraph) is a pair (V, E) of disjoint sets (of directed
graph
vertices and edges) together with two maps init: E → V and ter: E → V


28 1. The Basics
init(e) assigning to every edge e an initial vertex init(e) and a terminal vertex ter(e) ter(e). The edge e is said to be directed from init(e) to ter(e). Note that a directed graph may have several edges between the same two vertices x, y. Such edges are called multiple edges; if they have the same direction (say from x to y), they are parallel. If init(e) = ter(e), the edge e is called loop a loop.
orientation A directed graph D is an orientation of an (undirected) graph G if V (D) = V (G) and E(D) = E(G), and if {init(e), ter(e)} = {x, y} for every edge e = xy. Intuitively, such an oriented graph arises from an
oriented
graph undirected graph simply by directing every edge from one of its ends to the other. Put differently, oriented graphs are directed graphs without loops or multiple edges. multigraph A multigraph is a pair (V, E) of disjoint sets (of vertices and edges) together with a map E → V ∪ [V ]2 assigning to every edge either one or two vertices, its ends. Thus, multigraphs too can have loops and multiple edges: we may think of a multigraph as a directed graph whose edge directions have been ‘forgotten’. To express that x and y are the ends of an edge e we still write e = xy, though this no longer determines e uniquely. A graph is thus essentially the same as a multigraph without loops or multiple edges. Somewhat surprisingly, proving a graph theorem more generally for multigraphs may, on occasion, simplify the proof. Moreover, there are areas in graph theory (such as plane duality; see Chapters 4.6 and 6.5) where multigraphs arise more naturally than graphs, and where any restriction to the latter would seem artificial and be technically complicated. We shall therefore consider multigraphs in these cases, but without much technical ado: terminology introduced earlier for graphs will be used correspondingly.
G/e
G
e
ve
Fig. 1.10.1. Contracting the edge e in the multigraph corresponding to Fig. 1.8.1
A few differences, however, should be pointed out. A multigraph may have cycles of length 1 or 2: loops, and pairs of multiple edges (or double edges). A loop at a vertex makes it its own neighbour, and contributes 2 to its degree; in Figure 1.10.1, we thus have d(ve) = 6. The ends of loops and parallel edges in a multigraph G are considered as


1.10 Other notions of graphs 29
separating that edge from the rest of G. The vertex v of a loop e, therefore, is a cutvertex unless ({v}, {e}) is a component of G, and ({v}, {e}) is a ‘block’ in the sense of Chapter 3.1. Thus, a multigraph with a loop is never 2-connected, and any 3-connected multigraph is in fact a graph. The notion of edge contraction is simpler in multigraphs than in graphs. If we contract an edge e = xy in a multigraph G = (V, E) to a new vertex ve, there is no longer a need to delete any edges other than e itself: edges parallel to e become loops at ve, while edges xv and yv become parallel edges between ve and v (Fig. 1.10.1). Thus, formally,
E(G/e) = E {e}, and only the incidence map e′ → {init(e′), ter(e′)} of G has to be adjusted to the new vertex set in G/e. Contracting a loop thus has the same effect as deleting it. The notion of a minor adapts accordingly. The contraction minor G/P defined by a partition P of V (G) into connected sets has precisely those edges of G that join distinct partition classes. If there are several such edges between the same two classes, they become parallel edges of G/P . However, we do not normally give G/P any loops resulting from edges of G whose ends lie in the same partition class U . This would require us to say which of the edges of G[U ] are contracted (assuming they induce a connected spanning subgraph of G[U ]), or at least how many are, which seems futile if we do not care about loops in G/P anyway.
Fig. 1.10.2. Suppressing the white vertices
If v is a vertex of degree 2 in a multigraph G, then by suppressing v suppressing
a vertex
we mean deleting v and adding an edge between its two neighbours.13 (If its two incident edges are identical, i.e. form a loop at v, we add no edge and obtain just G − v. If they go to the same vertex w = v, the added edge will be a loop at w. See Figure 1.10.2.) Since the degrees of all vertices other than v remain unchanged when v is suppressed, suppressing several vertices of G always yields a well-defined multigraph that is independent of the order in which those vertices are suppressed. Finally, it should be pointed out that authors who usually work with multigraphs tend to call them ‘graphs’; in their terminology, our graphs would be called ‘simple graphs’.
13 This is just a clumsy combinatorial paraphrase of the topological notion of amalgamating the two edges at v into one edge, of which v becomes an inner point.


30 1. The Basics
Exercises
1.− What is the number of edges in a Kn?
2. Let d ∈ N and V := {0, 1}d; thus, V is the set of all 0–1 sequences of length d. The graph on V in which two such sequences form an edge if and only if they differ in exactly one position is called the d-dimensional cube. Determine the average degree, number of edges, diameter, girth and circumference of this graph.
(Hint for the circumference: induction on d.)
3. Let G be a graph containing a cycle C, and assume that G contains a path of length at least k between two vertices of C. Show that G
contains a cycle of length at least √k.
4.− Is the bound in Proposition 1.3.2 best possible?
5. Let v0 be a vertex in a graph G, and D0 := {v0}. For n = 1, 2, . . . inductively define Dn := NG(D0 ∪ . . . ∪ Dn−1). Show that Dn = { v | d(v0, v) = n } and Dn+1 ⊆ N (Dn) ⊆ Dn−1 ∪ Dn+1 for all n ∈ N.
6. Show that rad(G) diam(G) 2 rad(G) for every graph G.
7. Prove the weakening of Theorem 1.3.4 obtained by replacing average with minimum degree. Deduce that |G| n0(d/2, g) for every graph G as given in the theorem.
8. Show that graphs of girth at least 5 and order n have a minimum degree of o(n). In other words, show that there is a function f : N → N such that f (n)/n → 0 as n → ∞ and δ(G) f (n) for all such graphs G.
9.+ Show that every connected graph G contains a path or cycle of length at least min {2δ(G), |G|}.
10. Show that a connected graph of diameter k and minimum degree d has at least about kd/3 vertices but need not have substantially more.
11.− Show that the components of a graph partition its vertex set. (In other words, show that every vertex belongs to exactly one component.)
12.− Show that every 2-connected graph contains a cycle.
13. Determine κ(G) and λ(G) for G = P m, Cn, Kn, Km,n and the ddimensional cube (Exercise 2); d, m, n 3.
14.− Is there a function f : N → N such that, for all k ∈ N, every graph of minimum degree at least f (k) is k-connected?
15.+ Let α, β be two graph invariants with positive integer values. Formalize the two statements below, and show that each implies the other:
(i) β is bounded above by a function of α;
(ii) α can be forced up by making β large enough.
Show that the statement
(iii) α is bounded below by a function of β
is not equivalent to (i) and (ii). Which small change will make it so?


Exercises 31
16.+ Show for every k ∈ N that every graph of minimum degree 2k has a (k + 1)-edge-connected subgraph.
17. Consider the proof of Theorem 1.4.3. Would it not seem more natural to assume in the second statement of (∗) that ε(G′) > γ − k, as required for H in the statement of the theorem?
(i) Look how this alteration would change the proof: which parts would carry over, which could be adapted, and which would fail?
(ii) Explain how the use of an assumption of the form m ckn − bk rather than m ckn helps to obtain a contradiction in the final inequality of the proof.
18.+ (Ex. 16–17 continued) Find the smallest integer b = b(k) such that every graph of order n with more than kn + b edges has a (k + 1)-edgeconnected subgraph, for every k ∈ N.
19. Prove Theorem 1.5.1.
20.− Show that every tree T has at least Δ(T ) leaves.
21. Show that a tree without a vertex of degree 2 has more leaves than other vertices. Can you find a very short proof that does not use induction?
22. Let F, F ′ be forests on the same set of vertices, with ‖F ‖ < ‖F ′‖. Show that F ′ has an edge e such that F + e is again a forest.
23. Show that the tree-order associated with a rooted tree T is indeed a partial order on V (T ), and verify the claims made about this partial order in the text.
24. Show that a graph is 2-edge-connected if and only if it has a strongly connected orientation, one in which every vertex can be reached from every other vertex by a directed path.
25.+ Find a short inductive proof for the existence of normal spanning trees in finite connected graphs.
26.+ Let G be a connected graph, and let r ∈ G be a vertex. Starting from r, move along the edges of G, going whenever possible to a vertex not visited so far. If there is no such vertex, go back along the edge by which the current vertex was first reached (unless the current vertex is r; then stop). Show that the edges traversed form a normal spanning tree in G with root r.
(This procedure has earned those trees the name of depth-first search trees.)
27. Let T be a set of subtrees of a tree T , and k ∈ N.
(i) Show that if the trees in T have pairwise non-empty intersection
then their overall intersection ⋂ T is non-empty.
(ii) Show that either T contains k disjoint trees or there is a set of at most k − 1 vertices of T meeting every tree in T .
28. Show that every automorphism of a tree fixes a vertex or an edge.


32 1. The Basics
29.− Do the partition classes of a regular bipartite graph always have the same size?
30.− Show that a graph is bipartite if and only if every induced cycle has even length.
31. Prove or disprove that a graph is bipartite if and only if no two adjacent vertices have the same distance from any other vertex.
32.+ Find a function f : N → N such that, for all k ∈ N, every graph of average degree at least f (k) has a bipartite subgraph of minimum degree at least k.
33. Show that the minor relation defines a partial ordering on any set of pairwise non-isomorphic finite graphs. Is the same true for infinite graphs?
34.− If we had been careless, we might have defined a walk as an alternating sequence of vertices and edges, v0e0v1e1 . . . ek−1vk say, such that every edge ei is incident with both vi and vi+1. Show that, based on this definition, Theorem 1.8.1 would fail.
35. Prove or disprove that every connected graph contains a walk that traverses each of its edges exactly once in each direction.
36. Show that a cut in a connected graph G is a bond if and only if both parts of the corresponding bipartition of V (G) are connected in G.
37. Show that the cycle space of a graph is spanned by
(i) its induced cycles;
(ii) its geodesic cycles.
(A cycle C ⊆ G is geodesic in G if, for every two vertices of C, their distances in G equals their distance in C.)
38.− Show directly, without using generating bonds E(v), that the cuts of a graph together with the empty set form a subspace of its edge space. How does the vertex partition of a sum of two given cuts arise from their vertex partitions?
39. Let F be a cut in G, with vertex partition {V1, V2}. For i = 1, 2 let C1i , . . . , Ci
k(i) denote the components of G[Vi]. Use the Cji to define bonds whose disjoint union is F .
40. Given a graph G, find among all cuts of the form E(v) a basis for the cut space of G.
41. Prove that the cycles and the cuts in a graph together generate its entire edge space, or find a counterexample.
42.− Show the following duality between the fundamental cycles Ce and the fundamental cuts Df in a graph with respect to some fixed spanning tree: e ∈ Df ⇔ f ∈ Ce.
43. Show that in a connected graph the minimal edge sets containing an edge from every spanning tree are precisely its bonds.


Exercises 33
44. Let F be a set of edges in a graph G.
(i) Show that F extends to an element of B(G) if and only if it contains no odd cycle.
(ii)+ Show that F extends to an element of C(G) if and only if it contains no odd cut.
45.+ In a graph G let a, b be two vertices that are separated by a cut F of k edges but cannot be separated by fewer edges. Show that F is not a sum of cuts of fewer than k edges.
(Hint: Show that the cuts not separating a from b form a subspace of B(G). To prove this, design an ‘invariant’ of cuts in G, depending on a and b, that is constant on sums but distinguishes cuts that separate a from b from those that do not.)
46.+ Prove Gallai’s theorem that the edge set of any graph G can be written as a disjoint union E(G) = C ∪ D with C ∈ C(G) and D ∈ B(G).
47. Show that a set of vertices lies in the image of the incidence matrix of a connected graph if and only if it has even cardinality.
48. (i) Generalize Proposition 1.9.6 by describing the images under B and Bt of given sets F ⊆ E and U ⊆ V , as indicated in the text.
(ii) Reprove Proposition 1.9.7 for matrices with values in F2 by showing that BBt and A + D define the same the maps V → V.
49. Let A = (aij)n×n be the adjacency matrix of the graph G. Show that the matrix Ak = (a′ij)n×n displays, for all i, j n, the number a′ij of walks of length k from vi to vj in G.
Notes
The terminology used in this book is mostly standard. Alternatives do exist, and some of these are stated when a concept is first defined. Our formal definition of a graph G = (V, E) with E ⊆ [V ]2 is intended to convey two messages: that the edges are undirected (since {u, v} = {v, u} for sets), and that there are neither loops (since {v, v} ∈/ [V ]2 because |{v, v}| = 1) nor multiple edges (since two sets are equal as soon as they have the same elements). This formal definition—like any other—occasionally clashes with other standard terminology.14 But avoiding all such possible clashes would make the terminology so unwieldy that it would defeat the purpose of clarity. There is one small point where our notation deviates slightly from standard usage. Complete graphs, paths, cycles etc. of given order are usually denoted by Kn, Pk, C and so on, but we use superscripts instead of subscripts. This has the advantage of leaving the variables K, P , C etc. free for ad-hoc use: we may now enumerate components as C1, C2, . . ., speak of paths P1, . . . , Pk, and so on—without any danger of confusion.
14 For example, when e = {u, v} is an edge of G, then G − e and G − {u, v} mean two different things: in G − e we deleted the edge e but kept the vertices u and v, whereas in G − {u, v} we deleted the vertices u, v and all their incident edges.


34 1. The Basics
Theorem15 1.3.4 was proved by N. Alon, S. Hoory and N. Linial, The Moore bound for irregular graphs, Graphs Comb. 18 (2002), 53–57. The proof uses an ingenious argument counting random walks along the edges of the graph considered. The main assertion of Theorem 1.4.3, that an average degree of at least 4k forces a k-connected subgraph, is from W. Mader, Existenz n-fach zusammenha ̈ngender Teilgraphen in Graphen gen ̈ugend großer Kantendichte, Abh. Math. Sem. Univ. Hamburg 37 (1972) 86–97.
The intuition behind the notion of contraction is topological. When G is an IX and we view graphs topologically, we can reobtain X from G by contracting in each of the connected graphs G[Vx] a spanning tree Tx to a single vertex x, and deleting any loops or multiple edges that arise in the contraction. For the history of the Ko ̈nigsberg bridge problem, and Euler’s actual part in its solution, see N.L. Biggs, E.K. Lloyd & R.J. Wilson, Graph Theory 1736–1936 , Oxford University Press 1976. Of the large subject of algebraic methods in graph theory, Section 1.9 does not convey an adequate impression. A good introduction is N.L. Biggs, Algebraic Graph Theory (2nd edn.), Cambridge University Press 1993. A more comprehensive account is given by C.D. Godsil & G.F. Royle, Algebraic Graph Theory, Springer GTM 207, 2001. Surveys on the use of algebraic methods can also be found in the Handbook of Combinatorics (R.L. Graham, M. Gro ̈tschel & L. Lova ́sz, eds.), North-Holland 1995. See also Chung’s book cited below. In algebraic graph theory one usually takes as the elements of the vertex and edge space the functions mapping the vertices, respectively the oriented edges, to the reals. Then there are 2m standard bases of E and 2m incidence matrices, one for every choice of edge orientations. (No more, since we require that such functions ψ satisfy ψ(e, u, v) = −ψ(e, v, u) for every pair of inverse orientations of the same edge e.) For every fixed choice of orientations, the corresponding incidence matrix represents with respect to the corresponding basis of E the boundary map ∂: E → V that assigns to every (basis element for the) oriented edge (e, u, v) the map V → R assigning 1 to v and −1 to u and 0 to every other vertex (and which extends linearly to all of E). Similarly, the transpose of the incidence matrix represents the coboundary map δ: Hom(V, R) → Hom(E, R) mapping φ to φ ◦ ∂; thus, δ is dual to ∂ in the linear algebra sense. The product of the incidence matrix and its transpose is now BBt = D − A, the Laplacian of G. Note that, unlike B, the Laplacian is independent of our choice of basis for E, i.e., of our initial choice of orientations that defined our basis. It plays a fundamental role in algebraic graph theory and its connections to other areas of mathematics; see F.R.K. Chung, Spectral Graph Theory, AMS 1997 for much more.
15 In the interest of readability, the end-of-chapter notes in this book give references only for Theorems, and only in cases where these references cannot be found in a monograph or survey cited for that chapter.


2 Matching
Covering
and Packing
Suppose we are given a graph and are asked to find in it as many independent edges as possible. How should we go about this? Will we be able to pair up all its vertices in this way? If not, how can we be sure that this is indeed impossible? Somewhat surprisingly, this basic problem does not only lie at the heart of numerous applications, it also gives rise to some rather interesting graph theory. A set M of independent edges in a graph G = (V, E) is called a matching. M is a matching of U ⊆ V if every vertex in U is incident matching with an edge in M . The vertices in U are then called matched (by M ); matched vertices not incident with any edge of M are unmatched . A k-regular spanning subgraph is called a k-factor. Thus, a sub- factor graph H ⊆ G is a 1-factor of G if and only if E(H) is a matching of V . The problem of how to characterize the graphs that have a 1-factor, i.e. a matching of their entire vertex set, will be our main theme in the first two sections of this chapter. A generalization of the matching problem is to find in a given graph G as many disjoint subgraphs as possible that are each isomorphic to an element of a given class H of graphs. This is known as the packing packing problem. It is related to the covering problem, which asks how few covering vertices of G suffice to meet all its subgraphs isomorphic to a graph in H. Clearly, we need at least as many vertices for such a cover as the maximum number k of H-graphs that we can pack disjointly into G. If there is no cover by just k vertices, perhaps there is always a cover by at most f (k) vertices, where f (k) may depend on H but not on G? In
R. Diestel, Graph Theory, Graduate Texts in Mathematics 173, DOI 10.1007/978-3-662-53622-3_
© Reinhard Diestel 2017
2
35


36 2. Matching, Covering and Packing
Section 2.3 we shall prove that when H is the class of cycles, then there is such a function f . In Section 2.4 we consider packing and covering in terms of edges: we ask how many edge-disjoint spanning trees we can find in a given graph, and how few trees in it will cover all its edges. In Section 2.5 we prove a path cover theorem for directed graphs, which implies the well-known duality theorem of Dilworth for partial orders.
2.1 Matching in bipartite graphs
G = (V, E) For this whole section, we let G = (V, E) be a fixed bipartite graph with A, B bipartition {A, B}. Vertices denoted as a, a′ etc. will be assumed to lie a, b etc. in A, vertices denoted as b etc. will lie in B. How can we find a matching in G with as many edges as possible? Let us start by considering an arbitrary matching M in G. A path in G which starts in A at an unmatched vertex and then contains, alternately, edges from E M and from M , is an alternating path with respect to M .
alternating
path Note that the path is allowed to be trivial, i.e. to consist of its starting vertex only. An alternating path P that ends in an unmatched vertex of B is called an augmenting path (Fig. 2.1.1), because we can use it
augment
ing path to turn M into a larger matching: the symmetric difference of M with E(P ) is again a matching (consider the edges at a given vertex), and the set of matched vertices is increased by two, the ends of P .
M
AB AB
P M′
Fig. 2.1.1. Augmenting the matching M by the alternating path P
Alternating paths play an important role in the practical search for large matchings. In fact, if we start with any matching and keep applying augmenting paths until no further such improvement is possible, the matching obtained will always be an optimal one, a matching with the largest possible number of edges (Exercise 1). The algorithmic problem of finding such matchings thus reduces to that of finding augmenting paths—which is an interesting and accessible algorithmic problem.
Our first theorem characterizes the maximal cardinality of a matching in G by a kind of duality condition. Let us call a set U ⊆ V a (vertex) cover cover of E if every edge of G is incident with a vertex in U .


2.1 Matching in bipartite graphs 37
Theorem 2.1.1. (Ko ̈nig 1931)
The maximum cardinality of a matching in G is equal to the minimum cardinality of a vertex cover of its edges.
Proof. Let M be a matching in G of maximum cardinality. From every M edge in M let us choose one of its ends: its end in B if some alternating path ends in that vertex, and its end in A otherwise (Fig. 2.1.2). We shall prove that the set U of these |M | vertices covers E; since any vertex U cover of E must cover M , there can be none with fewer than |M | vertices, and so the theorem will follow.
U ∩A
U ∩B
Fig. 2.1.2. The vertex cover U
Note that if an alternating path P ends in a vertex b ∈ B, then b ∈ U : as M is a largest matching, P is not an augmenting path, so b is matched to some a ∈ A and was put in U when we considered the edge ab ∈ M while constructing U . To show that U covers E, let an edge ab ∈ E be given. If a ∈ U we are done, so assume that a ∈/ U . To prove b ∈ U , it suffices to show that some alternating path ends in b. If a is unmatched, then ab is such a path. If not, we have ab′ ∈ M for some b′ ∈ B. Since a ∈/ U , there exists an alternating path P ending in b′. Depending on whether or not b ∈ P , either P b or P b′ab is an alternating path ending in b.
Let us return to our main problem, the search for some necessary and sufficient conditions for the existence of a 1-factor. In our present case of a bipartite graph, we may as well ask more generally when G contains a matching of A; this will define a 1-factor of G if |A| = |B|, a condition that has to hold anyhow if G is to have a 1-factor. A condition clearly necessary for the existence of a matching of A is that every subset of A has enough neighbours in B, i.e. that
marriage condition
|N (S)| |S| for all S ⊆ A.
The following marriage theorem says that this obvious necessary condition is in fact sufficient:


38 2. Matching, Covering and Packing
[2.2.3] Theorem 2.1.2. (Hall 1935)
G contains a matching of A if and only if |N (S)| |S| for all S ⊆ A.
We give three proofs, of rather different character.1 In each proof we assume that G satisfies the marriage condition and find a matching of A.
M First proof. We show that for every matching M of G that leaves a a vertex a ∈ A unmatched there is an augmenting path with respect to M . Let A′ be the set of vertices in A that can be reached from a by a non-trivial alternating path, and B′ ⊆ B the set of all penultimate vertices of such paths. The last edges of these paths lie in M , so |A′| = |B′|. Hence by the marriage condition, there is an edge from a vertex v in S = A′ ∪ {a} to a vertex b in B B′. As v ∈ A′ ∪ {a}, there is an alternating path P from a to v. Then P vb is an alternating path from a to b; notice that b ∈/ P , since the vertices of P in B lie in B′. If b was matched, by a′b ∈ M say, then P vba′ would be an alternating path putting b in B′. But b ∈/ B′, so b is unmatched, and P vb is the desired augmenting path.
Second proof. We apply induction on |A|. For |A| = 1 the assertion is true. Now let |A| 2, and assume that the marriage condition is sufficient for the existence of a matching of A when |A| is smaller. If |N (S)| |S| + 1 for every non-empty set S A, we pick an edge ab ∈ G and consider the graph G′ := G − {a, b}. Then every non-empty set S ⊆ A {a} satisfies
|NG′ (S)| |NG(S)| − 1 |S| ,
so by the induction hypothesis G′ contains a matching of A {a}. Together with the edge ab, this yields a matching of A in G. Suppose now that A has a non-empty proper subset A′ with |B′| = |A′| for B′ := N (A′). By the induction hypothesis, G′ := G[A′ ∪ B′] contains a matching of A′. But G − G′ satisfies the marriage condition too: for any set S ⊆ A A′ with |NG−G′ (S)| < |S| we would have
|NG(S ∪ A′)| < |S ∪ A′|, contrary to our assumption. Again by induc
tion, G − G′ contains a matching of A A′. Putting the two matchings together, we obtain a matching of A in G.
H For our last proof, let H be an edge-minimal subgraph of G that satisfies the marriage condition and contains A. Note that dH (a) 1 for every a ∈ A, by the marriage condition with S = {a}.
1 The theorem can also be derived easily from Ko ̈nig’s theorem; see Exercise 5.


2.1 Matching in bipartite graphs 39
Third proof. We show that dH (a) = 1 for every a ∈ A. The edges of H then form a matching of A, since by the marriage condition no two such edges can share a vertex in B.
A1
A2
a
b2
b1
B1
Fig. 2.1.3. B1 contains b2 but not b1
Suppose a has distinct neighbours b1, b2 in H. By definition of H, the graphs H − ab1 and H − ab2 violate the marriage condition. So for i = 1, 2 there is a set Ai ⊆ A containing a such that |Ai| > |Bi| for Bi := NH−abi (Ai) (Fig. 2.1.3). Since b1 ∈ B2 and b2 ∈ B1,
|NH (A1 ∩ A2 {a})| |B1 ∩ B2|
= |B1| + |B2| − |B1 ∪ B2|
= |B1| + |B2| − ∣∣NH (A1 ∪ A2)|
|A1| − 1 + |A2| − 1 − |A1 ∪ A2|
= |A1 ∩ A2| − 2
= |A1 ∩ A2 {a}| − 1 .
Hence H violates the marriage condition, contrary to assumption.
This last proof has a pretty ‘dual’, which begins by showing that dH (b) 1 for every b ∈ B. See Exercise 6 and its hint for details.
Corollary 2.1.3. Every k-regular (k 1) bipartite graph has a 1-factor.
Proof. If G is k-regular, then clearly |A| = |B|; it thus suffices to show by Theorem 2.1.2 that G contains a matching of A. Now every set S ⊆ A is joined to N (S) by a total of k |S| edges, and these are among the k |N (S)| edges of G incident with N (S). Therefore k |S| k |N (S)|, so G does indeed satisfy the marriage condition.
In some real-life applications, matchings are not chosen on the basis of global criteria for the entire graph but evolve as the result of independent decisions made locally by the participating vertices. A typical situation is that vertices are not indifferent to which of their incident edges are picked to match them, but prefer some to others. Then if M


40 2. Matching, Covering and Packing
is a matching and e = ab is an edge not in M such that both a and b prefer e to their current matching edge (if they are matched), then a and b may agree to change M locally by including e and discarding their earlier matching edges. The matching M , although perhaps of maximum size, would thus be unstable. preferences More formally, call a family ( v)v∈V of linear orderings v on E(v) a set of preferences for G. Then call a matching M in G stable if for every edge e ∈ E M there exists an edge f ∈ M such that e and f have
stable
matching a common vertex v with e <v f . The following result is sometimes called the stable marriage theorem; see Exercises 16 and 17 for a discussion of alternative proofs.
[5.4.4] Theorem 2.1.4. (Gale & Shapley 1962)
For every set of preferences, G has a stable matching.
Proof. Call a matching M in G better than a matching M ′ = M if M makes the vertices in B happier than M ′ does, that is, if every vertex b in an edge f ′ ∈ M ′ is incident also with some f ∈ M such that f ′ b f . We shall construct a sequence of better and better matchings. Since these can increase the happiness of a fixed vertex b at most d(b) times, this process will terminate. Given a matching M , call a vertex a ∈ A acceptable to b ∈ B if e = ab ∈ E M and any edge f ∈ M at b satisfies f <b e. Call a ∈ A happy with M if a is unmatched or its matching edge f ∈ M satisfies f >a e for all edges e = ab such that a is acceptable to b. Starting with the empty matching, let us construct a sequence of matchings that keep all the vertices in A happy. Given such a matching M , consider a vertex a ∈ A that is unmatched but acceptable to some b ∈ B. (If no such a exists, terminate the sequence.) Add to M the a-maximal edge ab such that a is acceptable to b, and discard from M any other edge at b. Clearly, each matching in our sequence is better than the previous and keeps the vertices in A happy (which they initially are, when M = ∅). So the sequence continues until it terminates with a matching M such that no unmatched vertex in A is acceptable to any of its neighbours in B. As every matched vertex in A is happy with M , this matching is stable.
Despite its seemingly narrow formulation, the marriage theorem counts among the most frequently applied graph theorems, both outside graph theory and within. Often, however, recasting a problem in the setting of bipartite matching requires some clever adaptation. As a simple example, we now use the marriage theorem to derive one of the earliest results of graph theory, a result whose original proof is not all that simple, and certainly not short:


2.1 Matching in bipartite graphs 41
Corollary 2.1.5. (Petersen 1891)
Every regular graph of positive even degree has a 2-factor.
Proof. Let G be any 2k-regular graph (k 1), without loss of generality (1.8.1) connected. By Theorem 1.8.1, G contains an Euler tour v0e0 . . . e −1v ,
with v = v0. We replace every vertex v by a pair (v−, v+), and every
edge ei = vivi+1 by the edge v+
i v−
i+1 (Fig. 2.1.4). The resulting bipartite
graph G′ is k-regular, so by Corollary 2.1.3 it has a 1-factor. Collapsing every vertex pair (v−, v+) back into a single vertex v, we turn this 1factor of G′ into a 2-factor of G.
v
v−
v+
Fig. 2.1.4. Splitting vertices in the proof of Corollary 2.1.5
2.2 Matching in general graphs
Given a graph G, let us denote by CG the set of its components, and by CG q(G) the number of its odd components, those of odd order. If G has a q(G) 1-factor, then clearly Tutte’s
condition
q(G − S) |S| for all S ⊆ V (G),
since every odd component of G − S will send a factor edge to S.
G
SS
GS
Fig. 2.2.1. Tutte’s condition q(G − S) |S| for q = 3, and the contracted graph GS from Theorem 2.2.3.
Again, this obvious necessary condition for the existence of a 1-factor is also sufficient:


42 2. Matching, Covering and Packing
Theorem 2.2.1. (Tutte 1947)
A graph G has a 1-factor if and only if q(G − S) |S| for all S ⊆ V (G).
V, E Proof. Let G = (V, E) be a graph without a 1-factor. Our task is to find bad set a bad set S ⊆ V , one that violates Tutte’s condition. We may assume that G is edge-maximal without a 1-factor. Indeed, if G′ is obtained from G by adding edges and S ⊆ V is bad for G′, then S is also bad for G: any odd component of G′ − S is the union of components of G − S, and one of these must again be odd. What does G look like? Clearly, if G contains a bad set S then, by its edge-maximality and the trivial forward implication of the theorem,
all the components of G − S are complete and every vertex
s ∈ S is adjacent to all the vertices of G − s. (∗)
But also conversely, if a set S ⊆ V satisfies (∗) then either S or the empty set must be bad: if S is not bad we can join the odd components of G − S disjointly to S and pair up all the remaining vertices—unless |G| is odd, in which case ∅ is bad. So it suffices to prove that G has a set S of vertices satisfying (∗). S Let S be the set of vertices that are adjacent to every other vertex. If this set S does not satisfy (∗), then some component of G − S has nona, b, c adjacent vertices a, a′. Let a, b, c be the first three vertices on a shortest a–a′ path in this component; then ab, bc ∈ E but ac ∈/ E. Since b ∈/ S, d there is a vertex d ∈ V such that bd ∈/ E. By the maximality of G, there M1, M2 is a matching M1 of V in G + ac, and a matching M2 of V in G + bd.
P
c
a
b
d
C
22
1
1
1
Fig. 2.2.2. Deriving a contradiction if S does not satisfy (∗)
v Let P = d . . . v be a maximal path in G starting at d with an edge from M1 and containing alternately edges from M1 and M2 (Fig. 2.2.2). If the last edge of P lies in M1, then v = b, since otherwise we could continue P . Let us then set C := P + bd. If the last edge of P lies in M2, then by the maximality of P the M1-edge at v must be ac, so v ∈ {a, c}; then let C be the cycle dP vbd. In each case, C is an even cycle with every other edge in M2, and whose only edge not in E is bd. Replacing in M2 its edges on C with the edges of C − M2, we obtain a matching of V contained in E, a contradiction.


2.2 Matching in general graphs 43
Corollary 2.2.2. (Petersen 1891)
Every bridgeless cubic graph has a 1-factor.
Proof. We show that any bridgeless cubic graph G satisfies Tutte’s condition. Let S ⊆ V (G) be given, and consider an odd component C of G − S. Since G is cubic, the degrees (in G) of the vertices in C sum to an odd number, but only an even part of this sum arises from edges of C. So G has an odd number of S–C edges, and therefore has at least 3 such edges (since G has no bridge). The total number of edges between S and G − S thus is at least 3q(G − S). But it is also at most 3|S|, because G is cubic. Hence q(G − S) |S|, as required.
In order to shed a little more light on the techniques used in matching theory, we now give a second proof of Tutte’s theorem. In fact, we shall prove a slightly stronger result, a result that places a structure interesting from the matching point of view on an arbitrary graph. If the graph happens to satisfy the condition of Tutte’s theorem, this structure will at once yield a 1-factor.
A non-empty graph G = (V, E) is called factor-critical if G has no factor
critical
1-factor but for every vertex v ∈ G the graph G − v has a 1-factor. We call a vertex set S ⊆ V matchable to CG−S if the (bipartite2) graph GS, matchable which arises from G by contracting the components C ∈ CG−S to single vertices and deleting all the edges inside S, contains a matching of S. (Formally, GS is the graph with vertex set S ∪ CG−S and edge set GS { sC | ∃ c ∈ C : sc ∈ E }; see Fig. 2.2.1.)
Theorem 2.2.3. Every graph G = (V, E) contains a vertex set S with the following two properties:
(i) S is matchable to CG−S;
(ii) Every component of G − S is factor-critical.
Given any such set S, the graph G contains a 1-factor if and only if |S| = |CG−S|.
For any given G, the assertion of Tutte’s theorem follows easily from this result. Indeed, by (i) and (ii) we have |S| |CG−S| = q(G − S) (since factor-critical graphs have odd order); thus Tutte’s condition of q(G − S) |S| implies |S| = |CG−S|, and the existence of a 1-factor follows from the last statement of Theorem 2.2.3.
Proof of Theorem 2.2.3. Note first that the last assertion of the (2.1.2) theorem follows at once from the assertions (i) and (ii): if G has a 1-factor, we have q(G − S) |S| and hence |S| = |CG−S| as above;
2 except for the—permitted—case that S or CG−S is empty


44 2. Matching, Covering and Packing
conversely if |S| = |CG−S|, then the existence of a 1-factor follows straight from (i) and (ii). We now prove the existence of a set S satisfying (i) and (ii), by induction on |G|. For |G| = 0 we may take S = ∅. Now let G be given with |G| > 0, and assume the assertion holds for graphs with fewer vertices. Consider the sets T ⊆ V for which Tutte’s condition fails worst, i.e. for which
d d(T ) := dG(T ) := q(G − T ) − |T |
S is maximum, and let S be a largest such set T . Note that d(S) d(∅) 0. C We first show that every component C ∈ CG−S =: C is odd. If |C| is even, pick a vertex c ∈ C, and consider T := S ∪ {c}. As C − c has odd order it has at least one odd component, which is also a component of G − T . Therefore
q(G − T ) q(G − S) + 1 while |T | = |S| + 1 ,
so d(T ) d(S) contradicting the choice of S. Next we prove the assertion (ii), that every C ∈ C is factor-critical. Suppose there exist C ∈ C and c ∈ C such that C′ := C − c has no 1-factor. By the induction hypothesis (and the fact that, as shown earlier, for fixed G our theorem implies Tutte’s theorem) there exists a set S′ ⊆ V (C′) with
q(C′ − S′) > |S′| .
Since |C| is odd and hence |C′| is even, the numbers q(C′ − S′) and |S′| are either both even or both odd, so they cannot differ by exactly 1. We may therefore sharpen the above inequality to
q(C′ − S′) |S′| + 2 ,
giving dC′ (S′) 2. Then for T := S ∪ {c} ∪ S′ we have
d(T ) d(S) − 1 − 1 + dC′ (S′) d(S) ,
where the first ‘−1’ comes from the loss of C as an odd component and the second comes from including c in the set T . As before, this contradicts the choice of S. It remains to show that S is matchable to CG−S. If not, then by
the marriage theorem there exists a set S′ ⊆ S that sends edges to fewer than |S′| components in C. Since the other components in C are also components of G − (S S′), the set T = S S′ satisfies d(T ) > d(S), contrary to the choice of S.


2.2 Matching in general graphs 45
Let us consider once more the set S from Theorem 2.2.3, together S with any matching M in G. As before, we write C := CG−S. Let us C denote by kS the number of edges in M with at least one end in S, and by kC the number of edges in M with both ends in G − S. Since each kS, kC C ∈ C is odd, at least one of its vertices is not incident with an edge of the second type. Therefore every matching M satisfies
kS |S| and kC 1
2
(
|V | − |S| − |C|
)
. (1)
Moreover, G contains a matching M0 with equality in both cases: first M0
choose |S| edges between S and ⋃ C according to (i), and then use (ii) to find a suitable set of 1
2
(|C| − 1) edges in every component C ∈ C. This matching M0 thus has exactly
|M0| = |S| + 1
2
(
|V | − |S| − |C|
)
(2)
edges. Now (1) and (2) together imply that every matching M of maximum cardinality satisfies both parts of (1) with equality: by |M | |M0|
and (2), M has at least |S| + 1
2
(|V | − |S| − |C|) edges, which implies by (1) that neither of the inequalities in (1) can be strict. But equality in (1), in turn, implies that M has the structure described above: by kS = |S|, every vertex s ∈ S is the end of an edge st ∈ M with t ∈ G − S,
and by kC = 1
2
(|V | − |S| − |C|) exactly 1
2 (|C| − 1) edges of M lie in C,
for every C ∈ C. Finally, since these latter edges miss only one vertex in each C, the ends t of the edges st above lie in different components C for different s. The seemingly technical Theorem 2.2.3 thus hides a wealth of structural information: it contains the essence of a detailed description of all maximum-cardinality matchings in all graphs. A reference to the full statement of this structural result, known as the Gallai-Edmonds matching theorem, is given in the notes at the end of this chapter.
2.3 The Erdo ̋s-Po ́sa theorem
Much of the charm of Ko ̈nig’s and Hall’s theorems in Section 2.1 lies in the fact that they guarantee the existence of the desired matching as soon as some obvious obstruction does not occur. In Ko ̈nig’s theorem, we can find k independent edges in our graph unless we can cover all its edges by fewer than k vertices (in which case it is obviously impossible). More generally, if G is an arbitrary graph, not necessarily bipartite, and H is any class of graphs, we might compare the largest number k of graphs from H (not necessarily distinct) that we can pack disjointly into G with the smallest number s of vertices of G that will cover all its


46 2. Matching, Covering and Packing
subgraphs in H. If s can be bounded by a function of k, i.e. independently of G, we say that H has the Erdo ̋s-Po ́sa property. (Thus, formally, H has
Erdo ̋s-Po ́sa
property this property if there exists an N → N function k → f (k) such that, for every k and G, either G contains k disjoint subgraphs each isomorphic to a graph in H, or there is a set U ⊆ V (G) of at most f (k) vertices such that G − U has no subgraph in H.) Our aim in this section is to prove the theorem of Erdo ̋s and Po ́sa that the class of all cycles has this property: we shall find a function f (about 4k log k) such that every graph contains either k disjoint cycles or a set of at most f (k) vertices covering all its cycles. We begin by proving a stronger assertion for cubic graphs. For k ∈ N, put
sk :=
{ 4krk if k 2
1 if k 1 where rk := log k + log log k + 4 .
rk, sk
Lemma 2.3.1. Let k ∈ N, and let H be a cubic multigraph. If |H| sk, then H contains k disjoint cycles.
(1.3.5) Proof. We apply induction on k. For k 1 the assertion is trivial, so let k 2 be given for the induction step. Let C be a shortest cycle in H. We first show that H − C contains a subdivision of a cubic multim graph H′ with |H′| |H| − 2|C|. Let m be the number of edges between C and H − C. Since H is cubic and d(C) = 2, we have m |C|. We now consider bipartitions {V1, V2} of V (H), beginning with V1 := V (C) and allowing V2 = ∅. If H[V2] has a vertex of degree at most 1 we move this vertex to V1, obtaining a new partition {V1, V2} crossed by n fewer edges. Suppose we can perform a sequence of n such moves, but no more. (Our assumptions imply n 3, but we do not formally need this.) Then the resulting partition {V1, V2} is crossed by at most m − n edges. And H[V2] has at most m − n vertices of degree less than 3, because each of these is incident with a crossing edge. These vertices have degree exactly 2 in H[V2], since we could not move them to V1. Let
H′ be the cubic multigraph obtained from H[V2] by suppressing these vertices. Then
|H′| |H| − |C| − n − (m − n) |H| − 2|C| ,
as desired. To complete the proof, it suffices to show that |H′| sk−1. Since |C| 2 log |H| by Corollary 1.3.5 (or by |H| sk, if |C| = g(H) 2), and |H| sk 6, we have
|H′| |H| − 2|C| |H| − 4 log |H| sk − 4 log sk .
(In the last inequality we use that the function x → x − 4 log x increases for x 6.)


2.3 The Erdo ̋s-Po ́sa theorem 47
It thus remains to show that sk − 4 log sk sk−1. For k = 2 this is clear, so we assume that k 3. Then rk 4 log k (which is obvious for k 4, while the case of k = 3 has to be calculated), and hence
sk − 4 log sk = 4(k − 1)rk + 4 log k + 4 log log k + 16
− (8 + 4 log k + 4 log rk
)
sk−1 + 4 log log k + 8 − 4 log(4 log k)
= sk−1 .
Theorem 2.3.2. (Erdo ̋s & Po ́sa 1965)
There is a function f : N → N such that, given any k ∈ N, every graph contains either k disjoint cycles or a set of at most f (k) vertices meeting all its cycles.
Proof. We show the result for f (k) := sk + k − 1 . Let k be given, and let G be any graph. We may assume that G contains a cycle, and so it has a maximal subgraph H in which every vertex has degree 2 or 3. Let U be its set of degree 3 vertices. U Let C be the set of all cycles in G that avoid U and meet H in exactly one vertex. Let Z ⊆ V (H) U be the set of those vertices. For each Z z ∈ Z pick a cycle Cz ∈ C that meets H in z, and put C′ := { Cz | z ∈ Z }.
By the maximality of H, the cycles in C′ are disjoint. Let D be the set of the 2-regular components of H that avoid Z. Then C′ ∪ D is another set of disjoint cycles. If |C′ ∪ D| k, we are done. Otherwise we can add to Z one vertex from each cycle in D to obtain a set X of at most k − 1 vertices that meets all the cycles in C and all the X 2-regular components of H. Now consider any cycle of G that avoids X. By the maximality of H it meets H. But it is not a component of H, it does not lie in C, and it does not contain an H- path between distinct vertices outside U (by the maximality of H). So this cycle meets U . We have shown that every cycle in G meets X ∪ U . As |X| k − 1, it thus suffices to show that |U | < sk unless H contains k disjoint cycles. But this follows from Lemma 2.3.1 applied to the multigraph obtained from H by suppressing its vertices of degree 2.
The proof of Theorem 2.3.2 can be adapted to give an analogous result for packing cycles edge-disjointly and covering them by edges; this is outlined in Exercise 22 of Chapter 7. A simpler proof of the edge version using Ramsey’s theorem is indicated in Exercise 6 of Chapter 9. We shall also meet the Erdo ̋s-Po ́sa property again in Chapter 12. There, a considerable extension of Theorem 2.3.2 will appear as an unexpected and easy corollary of the theory of graph minors.


48 2. Matching, Covering and Packing
2.4 Tree packing and arboricity
In this section we consider packing and covering in terms of edges rather than vertices. How many edge-disjoint spanning trees can we find in a given connected graph? And how few trees, not necessarily edge-disjoint, suffice to cover all its edges? These two questions have two classical theorems answering them. But rather than proving these theorems directly, we shall obtain them both as corollaries of a beautiful recent unification due to Bowler and Carmesin: the packing-covering theorem. To motivate the tree packing problem, assume for a moment that our graph represents a communication network, and that for every choice of two vertices we want to be able to find k edge-disjoint paths between them. Menger’s theorem (3.3.6) in the next chapter will tell us that such paths exist as soon as our graph is k-edge-connected, which is clearly also necessary. This is a good theorem, but it does not tell us how to find those paths; in particular, having found them for one pair of endvertices we are not necessarily better placed to find them for another pair. If our graph has k edge-disjoint spanning trees, however, there will always be k canonical such paths, one in each tree. Once we have stored those trees in our computer, we shall always be able to find the k paths quickly, between any given pair of vertices. When does a graph G have k edge-disjoint spanning trees? If it does, it clearly must be k-edge-connected. The converse, however, is easily seen to be false (try k = 2); indeed it is not even clear that any edge-connectivity will imply the existence of k edge-disjoint spanning trees. (But see Corollary 2.4.2 below.) Here is another necessary condition. If G has k edge-disjoint spanning trees, then with respect to any partition of V (G) into r sets, every cross-edges spanning tree of G has at least r − 1 cross-edges, edges whose ends lie in different partition sets. (Why?) Thus if G has k edge-disjoint spanning trees, it has at least k (r − 1) cross-edges. This condition is also sufficient:
Theorem 2.4.1. (Nash-Williams 1961; Tutte 1961)
A multigraph contains k edge-disjoint spanning trees if and only if for
tree packing theorem
[8.6.9] every partition P of its vertex set it has at least k (|P | − 1) cross-edges.
Theorem 2.4.1 has a striking corollary: 2k-edge-connectedness is enough to ensure the existence of k edge-disjoint spanning trees.
[6.4.4] Corollary 2.4.2. Every 2k-edge-connected multigraph G has k edgedisjoint spanning trees.
Proof. Every class in a vertex partition of G is joined to other partition classes by at least 2k edges. Hence, for any partition into r sets, G has at least 1
2
∑r
i=1 2k = kr cross-edges. The assertion thus follows from Theorem 2.4.1.


2.4 Tree packing and arboricity 49
Note that the quantitative condition on cross-edges in Theorem 2.4.1 is equivalent to asking the same only for partitions into connected vertex sets: any other partition is refined by such a partition, and if the latter has enough cross-edges (even though it has more classes) then clearly so does the former. The tree packing theorem thus says that a multigraph has k edge-disjoint spanning trees as soon as all its contraction minors have enough edges to support k edge-disjoint spanning trees. We shall meet Theorem 2.4.1 again in Chapter 8.6, where we prove an infinite analouge. This is based not on ordinary spanning trees (for which the result is false) but on ‘topological spanning trees’: the analogous structures in a topological space formed by the graph together with its ends, points at infinity that make it compact. Let us now turn to the covering problem. To bring out its duality to the packing problem, we begin by rephrasing the latter. Let us say that some given subgraphs of a multigraph G form an edge-decomposition of G if their edge sets partition E(G). Our spanning tree problem can now be recast as follows: into how many connected spanning subgraphs can we edge-decompose G? Since a spanning subgraph is connected if and only if it has an edge in every bond, the packing problem in this new guise has a ‘dual’ reminiscent of Theorems 1.5.1 and 1.9.4: into how few acyclic subgraphs—those whose complement meets all their circuitscan we edge-decompose G? Let us say that some given graphs, not necessarily subgraphs of G, cover its edges if every edge of G lies in at least one of them. Our dual cover problem, then, is for which multigraphs G can we cover their edges by at most k trees. An obvious necessary condition is that every set U ⊆ V (G) induces at most k (|U | − 1) edges, no more than |U | − 1 for each tree. Or, to phrase it dually to the tree packing condition, that no ‘deletion minor’ (subgraph) of G has too many edges to be covered by k trees. Once more, this condition turns out to be sufficient too:
Theorem 2.4.3. (Nash-Williams 1964)
The edges of a multigraph G = (V, E) can be covered by at most k trees
tree covering theorem
if and only if ‖G[U ]‖ k (|U | − 1) for every non-empty set U ⊆ V .
The least number of trees that can cover the edges of a graph is its arboricity. By Theorem 2.4.3, the arboricity of a graph is a measure arboricity for its maximum local density: it has small arboricity if and only if it is ‘nowhere dense’ in the sense that it has no subgraph H with ε(H) large.
We finally come to the packing-covering theorem. Recall from Chapter 1.10 that when we form a contraction minor G/P of a multigraph G, we keep all the edges of G between different partition classes: edges between the same two classes U, U ′ ∈ P become parallel edges of G/P .


50 2. Matching, Covering and Packing
Theorem 2.4.4. (Bowler & Carmesin 2015)
For every connected multigraph G = (V, E) and every k ∈ N there is a
packingcovering
theorem partition P of V such that every G[U ] with U ∈ P has k edge-disjoint spanning trees and the edges of G/P can be covered by k spanning trees.
Before we prove the packing-covering theorem, let us deduce Theorems 2.4.1 and 2.4.3.
Proof of Theorem 2.4.1 from Theorem 2.4.4.
Suppose a multigraph G has at least k (|P | − 1) cross-edges for every partition P of V (G). Let P be the partition provided by Theorem 2.4.4. By the theorem, G/P has k spanning trees covering its edges. Since ‖G/P ‖ k (|P | − 1), they must be edge-disjoint. Combining them with the edge-disjoint spanning trees in the G[U ] that are also provided by Theorem 2.4.4, we obtain the desired k spanning trees of G.
Proof of Theorem 2.4.3 from Theorem 2.4.4.
Suppose every U ⊆ V induces at most k (|U | − 1) edges in G. Let C be a component of G, and P the partition of V (C) provided by Theorem 2.4.4. For each U ∈ P , each of the k edge-disjoint spanning trees of G[U ] that the theorem provides has |U | − 1 edges, so all the edges of G[U ] lie in these trees. Combining these trees with the spanning trees of C/P that cover its edges, also provided by Theorem 2.4.4, we obtain k spanning trees of C covering its edges. These can be combined to k forests covering the edges of G. Add edges to turn these into the desired k trees.
Given the power of the packing-covering theorem, its proof is strikingly short and elegant. To prepare some notation, consider a spanning tree T of G, a chord e, and an edge f ∈ T on its fundamental cycle Ce.
Then T ′ = T + e − f is another spanning tree: this is immediate from Corollary 1.5.3, because T ′ is still connected and has the same number of edges as T . One says that T ′ is obtained from T by exchanging f for e. Now let T = (T1, . . . , Tk) be a family of spanning trees of G. Call a sequence e0, . . . , en of edges an exchange chain for T started by e0 if
exchange
chain en lies on none of these trees but for every i < n there exists j =: j(i) such that ei ∈ Tj while ei+1 is a chord of Tj whose fundamental cycle with respect to Tj contains ei.
E(T ) Let us write E(T ) := ⋃ { E(T ) | T ∈ T } for any such family.
Lemma 2.4.5. If e0 starts an exchange chain for T and lies in two of
its trees, then there is a family T ′ of k spanning trees of G such that E(T ) E(T ′).
Proof. Choose e0, . . . , en of minimal length among the exchange chains for T that start with e0. Then no ei lies on the fundamental cycle, with respect to any tree in T , of any e with > i + 1: otherwise we could shorten the sequence by skipping from ei straight to e or e +1.


2.4 Tree packing and arboricity 51
Starting with T 0 = T, define T i+1 inductively for i = 0, . . . , n − 1 by
replacing in T i = (T1i, . . . , Tki) the tree Tji with Tji + ei+1 − ei =: T i+1
j for
j = j(i) and letting T i+1
j := Tji for all other j. Note that, for j = j(i), the minimality of our sequence implies that every edge e of Tj on its fundamental cycle for ei+1 is still in Tji: otherwise e = ei′ for some
i′ < i, with a contradiction for := i + 1 > i′ + 1. Thus, if Tji is a
spanning tree of G, as we may assume inductively, then so is T i+1
j.
Clearly, T ′ := (T1n, . . . , Tkn) satisfies E(T ′) = E(T ) ∪ {en}.
Proof of Theorem 2.4.4. Let T = (T1, . . . , Tk) be a family of k spanning trees of G, chosen with E(T ) maximal. Let D be the set of all edges of G that start an exchange chain for T . These include all edges not in E(T ), since they form singleton exchange chains. Let P be the partition of V into the vertex sets of the components of (V, D). For the theorem’s packing assertion, let U ∈ P be given. For all j = 1, . . . , k let Sj be the subgraph of Tj[U ] formed by its edges in D. These forests Sj are edge-disjoint, since by the maximality of T and Lemma 2.4.5 no edge in D lies in more than one Tj. Let us show that the Sj are connected. Since the edges of D form a connected submultigraph on U, it suffices to show that for every edge uu′ ∈ D with u, u′ ∈ U there is a u–u′ path in Sj. This is clear if uu′ lies in Tj, and hence in Sj. If it does not,
then the path uTju′ still has all its edges e in D, and hence lies in Sj:
if e0, . . . , en is an exchange chain witnessing that e0 = uu′ ∈ D, then e, e0, . . . en is an exchange chain putting e in D, because e lies on the fundamental cycle of e0 with respect to Tj. As every Tj induces connected subgraphs Sj on the partition classes
of P , contracting these Sj turns the Tj into spanning trees Tj′ of G/P .
These Tj′ cover all the edges of G/P , since E E(T ) ⊆ D.
The packing-covering theorem differs from both the tree packing and the tree covering theorem in a fundamental way. The non-trivial directions of the latter two theorems each obtain a structural assertion about a graph, the existence of a packing or covering, as a consequence of quantitative assumptions about all their minors of a certain type: contraction minors for the packing theorem, and ‘deletion minors’—i.e., subgraphs—for the covering theorem. This format makes them interesting: they offer valuable structural information for one graph in exchange for less valuable quantitative information about many smaller graphs. The packing-covering theorem, by contrast, makes a structural assertion about every graph: with no need for any assumptions at all, neither quantitative nor qualitative. The packing-covering theorem extends to infinite graphs in two interestingly different ways; see Exercises 18 and 126 in Chapter 8.


52 2. Matching, Covering and Packing
2.5 Path covers
Let us return once more to Ko ̈nig’s duality theorem for bipartite graphs, Theorem 2.1.1. If we orient every edge of G from A to B, the theorem tells us how many disjoint directed paths we need in order to cover all the vertices of G: every directed path has length 0 or 1, and clearly the number of paths in such a ‘path cover’ is smallest when it contains as many paths of length 1 as possible—in other words, when it contains a maximum-cardinality matching. In this section we put the above question more generally: how many paths in a given directed graph will suffice to cover its entire vertex set? Of course, this could be asked just as well for undirected graphs. As it turns out, however, the result we shall prove is rather more trivial in the undirected case (exercise), and the directed case will also have an interesting corollary. A directed path is a directed graph P = ∅ with distinct vertices x0, . . . , xk and edges e0, . . . , ek−1 such that ei is an edge directed from path xi to xi+1, for all i < k. In this section, path will always mean ‘directed path’. The vertex xk above is the last vertex of the path P , and when P ter(P) is a set of paths we write ter(P) for the set of their last vertices. A path path cover cover of a directed graph G is a set of disjoint paths in G which together contain all the vertices of G.
Theorem 2.5.1. (Gallai & Milgram 1960)
Every directed graph G has a path cover P and an independent set { vP | P ∈ P } of vertices such that vP ∈ P for every P ∈ P.
Proof. Clearly, G has a path cover, e.g. by trivial paths. We prove by P, Pi induction on |G| that for every path cover P = {P1, . . . , Pm} with ter(P) vi minimal there is a set { vP | P ∈ P } as claimed. For each i, let vi denote the last vertex of Pi. If ter(P) = {v1, . . . , vm} is independent there is nothing more to show, so we assume that G has an edge from v2 to v1. Since P2v2v1 is again a path, the minimality of ter(P) implies that v1 is not the
v only vertex of P1; let v be the vertex preceding v1 on P1. Then P′ :=
P′, G′ {P1v, P2, . . . , Pm} is a path cover of G′ := G − v1 (Fig. 2.5.1). Clearly,
any independent set of representatives for P′ in G′ will also work for P in G, so all we have to check is that we may apply the induction hypothesis to P′. It thus remains to show that ter(P′) = {v, v2, . . . , vm}
is minimal among the sets of last vertices of path covers of G′. Suppose then that G′ has a path cover P′′ with ter(P′′) ter(P′). If a path P ∈ P′′ ends in v, we may replace P in P′′ by P vv1 to obtain a path cover of G whose set of last vertices is a proper subset of ter(P), contradicting the choice of P. If a path P ∈ P′′ ends in v2 (but none in v),
we similarly replace P in P′′ by P v2v1 to obtain a contradiction to the
minimality of ter(P). Hence ter(P′′) ⊆ {v3, . . . , vm}. But now P′′ and


2.5 Path covers 53
...
v1 v2
P1 P2
v
Pm
Fig. 2.5.1. Path covers of G and G′
the trivial path {v1} together form a path cover of G that contradicts the minimality of ter(P).
As a corollary to Theorem 2.5.1 we obtain a classical result from the theory of partial orders. Recall that a subset of a partially ordered set (P, ) is a chain in P if its elements are pairwise comparable; it is chain an antichain if they are pairwise incomparable. antichain
Corollary 2.5.2. (Dilworth 1950)
In every finite partially ordered set (P, ), the minimum number of chains with union P is equal to the maximum cardinality of an antichain in P .
Proof. If A is an antichain in P of maximum cardinality, then clearly P cannot be covered by fewer than |A| chains. The fact that |A| chains will suffice follows from Theorem 2.5.1 applied to the directed graph on P with the edge set { (x, y) | x < y }.
Exercises
1. Let M be a matching in a bipartite graph G. Show that if M is suboptimal, i.e. contains fewer edges than some other matching in G, then G contains an augmenting path with respect to M . Does this fact generalize to matchings in non-bipartite graphs?
2. Describe an algorithm that finds, as efficiently as possible, a matching of maximum cardinality in any bipartite graph.
3. Show that if there exist injective functions A → B and B → A between two infinite sets A and B then there exists a bijection A → B.
4. Moving alternately, two players jointly construct a path in some fixed graph G. If v1 . . . vn is the path constructed so far, the player to move next has to find a vertex vn+1 such that v1 . . . vn+1 is again a path. Whichever player cannot move loses. For which graphs G does the first player have a winning strategy, for which the second?


54 2. Matching, Covering and Packing
5. Derive the marriage theorem from Ko ̈nig’s theorem.
6. Let G and H be defined as for the third proof of Hall’s theorem. Show that dH (b) 1 for every b ∈ B, and deduce the marriage theorem.
7. Does our first proof of the marriage theorem use the assumption that the graph is finite? If so, can it be adapted so that it works for infinite graphs too?
8. Let k be an integer. Show that any two partitions of a finite set into k-sets admit a common choice of representatives.
9. Let A be a finite set with subsets A1, . . . , An, and let d1, . . . , dn ∈ N. Show that there are disjoint subsets Dk ⊆ Ak, with |Dk| = dk for all k n, if and only if ∣∣∣ ⋃
i∈I
Ai
∣∣∣ ∑
i∈I
di
for all I ⊆ {1, . . . , n}.
10.+ Prove that in an n-set X there are never more than ( n
n/2
) subsets such that none of these contains another.
(Hint. Construct ( n
n/2
) chains covering the power set lattice of X.)
11. Let G be a bipartite graph with bipartition {A, B}. Assume that δ(G) 1, and that d(a) d(b) for every edge ab with a ∈ A. Show that G contains a matching of A.
12.− Find a bipartite graph with a set of preferences such that no matching of maximum size is stable and no stable matching has maximum size. Find a non-bipartite graph with a set of preferences that has no stable matching.
13.− Consider the algorithm described in the proof of the stable marriage theorem. Observe that once a vertex of B is matched, she remains matched and gets happier with every change of her matching edge. On the other hand, show that the sequence of matching edges incident with a given vertex of A makes this vertex unhappier with every change (disregarding the interim periods when he is unmatched).
14. Show that all stable matchings of a given graph cover the same vertices. (In particular, they have the same size.)
15.+ Show that the algorithm in our proof of Theorem 2.1.4 produces a matching M such that no other stable matching makes any vertex in A happier or any vertex in B unhappier than he or she is in M . Consider only matched vertices for happiness.
16.+ Show that the following ‘obvious’ algorithm need not produce a stable matching in a bipartite graph. Start with any matching. If the current matching is not maximal, add an edge. If it is maximal but not stable, insert an edge that creates instability, deleting any current matching edges at its ends.


Exercises 55
17. Show that the union of two partial orderings 1, 2 of a finite set P has a ‘dominating antichain’, a set A ⊆ P such that no two elements of A are related in either 1 or 2 and for every x ∈ P there exists an a ∈ A such that x 1 a or x 2 a. Deduce Theorem 2.1.4.
18. Find a set S for Theorem 2.2.3 when G is a forest.
19. A graph G is called (vertex-) transitive if, for any two vertices v, w ∈ G, there is an automorphism of G mapping v to w. Using the observations following the proof of Theorem 2.2.3, show that every transitive connected graph of even order contains a 1-factor.
20.+ Show that a graph G contains k independent edges if and only if q(G − S) |S| + |G| − 2k for all sets S ⊆ V (G).
21.− Find a cubic graph without a 1-factor.
22.+ Derive the marriage theorem from Tutte’s theorem.
23.− Disprove the analogue of Ko ̈nig’s theorem (2.1.1) for non-bipartite graphs, but show that H = {K2} has the Erdo ̋s-Po ́sa property.
24. Let T be a tree and T a set of subtrees of T . Show that the maximum number of disjoint trees in T equals the least cardinality of a set X of vertices such that T − X contains no tree from T .
25. For cubic graphs, Lemma 2.3.1 is considerably stronger than the Erdo ̋sPo ́sa theorem. Extend the lemma to arbitrary multigraphs of minimum degree 3, by finding a function g: N → N such that every multigraph of minimum degree 3 and order at least g(k) contains k disjoint cycles, for all k ∈ N. Alternatively, show that no such function g exists.
26. Given a graph G, let α(G) denote the largest size of a set of independent vertices in G. Prove that the vertices of G can be covered by at most α(G) disjoint subgraphs each isomorphic to a cycle or a K2 or K1.
27. Show that if G has two edge-disjoint spanning trees, it has a connected spanning subgraph all whose degrees are even.
28. In the proofs of Theorems 2.4.1, 2.4.3 and 2.4.4, there is exactly one place where we use that we are working with multigraphs. Where is it?
29. Find the error in the following short ‘proof’ of Theorem 2.4.1. Call a partition non-trivial if it has at least two classes and at least one of the classes has more than one element. We show by induction on |V | + |E| that G = (V, E) has k edge-disjoint spanning trees if every non-trivial partition of V into r sets (say) has at least k(r − 1) cross-edges. The induction starts trivially with G = K1 if we allow k copies of K1 as a family of k edge-disjoint spanning trees of K1. We now consider the induction step. If every non-trivial partition of V into r sets (say) has more than k(r − 1) cross-edges, we delete any edge of G and are done by induction. So V has a non-trivial partition {V1, . . . , Vr} with exactly k(r − 1) cross-edges. Assume that |V1| 2. If G′ := G[V1] has k disjoint spanning trees, we may combine these with k disjoint spanning trees that exist in G/V1 by induction. We may thus assume that G′ has


56 2. Matching, Covering and Packing
no k disjoint spanning trees. Then by induction it has a non-trivial vertex partition {V1′, . . . , Vs′} with fewer than k(s − 1) cross-edges.
Then {V1′, . . . , Vs′, V2, . . . , Vr} is a non-trivial vertex partition of G into r + s − 1 sets with fewer than k(r − 1) + k(s − 1) = k((r + s − 1) − 1) cross-edges, a contradiction.
30. A graph G is called balanced if ε(H) ε(G) for every subgraph H ⊆ G.
(i) Find a few natural classes of balanced graphs.
(ii) Show that the arboricity of a balanced graph is bounded above by its average degree. Is it even bounded by ε? Or by ε + 1?
(iii) Characterize, in terms of the balanced graphs or otherwise, the graphs G such that ε(H) ε(G) for every induced subgraph H ⊆ G.
31. Rephrase Ko ̈nig’s and Dilworth’s theorems as pure existence statements without any inequalities.
32.− Prove the undirected version of the theorem of Gallai & Milgram (without using the directed version).
33. Derive the marriage theorem from the theorem of Gallai & Milgram.
34.− Show that a partially ordered set of at least rs + 1 elements contains either a chain of size r + 1 or an antichain of size s + 1.
35. Prove the following dual version of Dilworth’s theorem: in every finite partially ordered set (P, ), the minimum number of antichains with union P is equal to the maximum cardinality of a chain in P .
36. Derive Ko ̈nig’s theorem from Dilworth’s theorem.
37. Find a partially ordered set that has no infinite antichain but is not a union of finitely many chains.
Notes
There is a very readable and comprehensive monograph about matching in finite graphs: L. Lova ́sz & M.D. Plummer, Matching Theory, Annals of Discrete Math. 29, North Holland 1986. Two other very comprehensive sources are A. Schrijver, Combinatorial optimization, Springer 2003, and A. Frank, Connections in combinatorial optimization, Oxford University Press 2011. All the references for the results in this chapter can be found in these books. As we shall see in Chapter 3, Ko ̈nig’s Theorem of 1931 is no more than the bipartite case of a more general theorem due to Menger, of 1929. At the time, neither of these results was nearly as well known as Hall’s marriage theorem, which he proved even later, in 1935. To this day, Hall’s theorem remains one of the most applied graph-theoretic results. The first two of our proofs are folklore. The edge-minimal subgraph approach of our third proof can be traced back to a paper of Rado (1967); our version and its dual, Exercise 6, are due to Kriesell.


Notes 57
More on the stable marriage theorem can be found in D. Gusfield & R.W. Irving, The Stable Marriage Problem: Structure and Algorithms, MIT Press 1989, and in A. Tamura, Transformation from arbitrary matchings to stable matchings, J. Comb. Theory A 62 (1993), 310–323. Some particularly rewarding applications are listed under ‘Advanced Information’ on http://www.nobelprize.org/nobel prizes/economic-sciences/laureates/2012. Our proof of Tutte’s 1-factor theorem is based on a proof by Lova ́sz (1975). Our extension of Tutte’s theorem, Theorem 2.2.3 (including the informal discussion following it) is a lean version of a comprehensive structure theorem for matchings, due to Gallai (1964) and Edmonds (1965). See Lova ́sz & Plummer for a detailed statement and discussion of this theorem. Theorem 2.3.2 is due to P. Erdo ̋s & L. Po ́sa, On independent circuits contained in a graph, Canad. J. Math. 17 (1965), 347–352. Our proof is essentially due to M. Simonovits, A new proof and generalization of a theorem of Erdo ̋s and Po ́sa on graphs without k + 1 independent circuits, Acta Sci. Hungar 18 (1967), 191–206. Calculations such as in Lemma 2.3.1 are standard for proofs where one aims to bound one numerical invariant in terms of another. This book does not emphasize this aspect of graph theory, but it is not atypical. There is also an analogue of the Erdo ̋s-Po ́sa theorem for directed graphs, due to B. Reed, N. Robertson, P.D. Seymour and R. Thomas, Packing directed circuits, Combinatorica 16 (1996), 535–554. Its proof is more difficult than the undirected case; see Chapter 12.6, and in particular Theorem 12.6.5, for a glimpse of the techniques used. The tree packing theorem, Theorem 2.4.1, was proved independently by Nash-Williams and Tutte; both papers are contained in J. Lond. Math. Soc. 36 (1961). The tree covering theorem, Theorem 2.4.3, is due to C.St.J.A. NashWilliams, Decompositions of finite graphs into forests, J. Lond. Math. Soc. 39 (1964), 12. The partitions whose existence is asserted by the packing-covering theorem, Theorem 2.4.4, were first constructed explicitly by B. Jackson and T. Jorda ́n, Brick partitions of graphs, Discrete Math. 310 (2010), 270–275. They may not be unique, and are interesting in their own right; see the paper, and Frank’s monograph cited earlier, for more. The packing-covering theorem itself, together with its direct proof that does not rely on the classical tree packing and covering theorems but implies them, is from N. Bowler and J. Carmesin, Matroid intersection, base packing and base covering for infinite matroids, Combinatorica 35 (2015), 153–180, arXiv:1202.3409. It has long been known that the tree packing and covering theorems can be naturally expressed in terms of matroids; see Schrijver’s book cited earlier. However it was only recently when infinite matroids were axiomatized and thus made accessible to systematic study, forcing the translation of quantitative assertions about finite matroids into structural ones to make them meaningful also for infinite matroids, that Bowler and Carmesin found the packing-covering theorem. The main focus of their paper is to show how the unproved infinite version of the packing-covering theorem for matroids, the packing-covering conjecture, plays a central role in infinite matroid theory. The conjecture implies, among other things, the Aharoni-Berger theorem for infinite graphs (Theorem 8.4.2), one of the deepest theorems in graph theory. The packing-covering theorem extends to infinite graphs in two ways:


58 2. Matching, Covering and Packing
with ordinary spanning trees (Exercise 18, Ch. 8), and with ‘topological’ spanning trees (Exercise 126, Ch. 8). These infinite versions also follow from two cases of the infinite packing-covering conjecture that Bowler and Carmesin prove in their paper, those for finitary and for cofinitary matroids. An interesting vertex analogue of Corollary 2.4.2 is to ask which connectivity forces the existence of k spanning trees T1, . . . , Tk, all rooted at a given vertex r, such that for every vertex v the k paths vTir are independent. For example, if G is a cycle then deleting the edge left or right of r produces two such spanning trees. A. Itai and A. Zehavi, Three tree-paths, J. Graph Theory 13 (1989), 175–187, conjectured that κ k should suffice. This conjecture has been proved for k 4; see S. Curran, O. Lee & X. Yu, Chain decompositions and independent trees in 4-connected graphs, Proc. 14th Ann. ACM SIAM symposium on Discrete algorithms (Baltimore 2003), 186–191.
Theorem 2.5.1 is due to T. Gallai & A.N. Milgram, Verallgemeinerung eines graphentheoretischen Satzes von Re ́dei, Acta Sci. Math. (Szeged) 21 (1960), 181–186.


3 Connectivity
Our definition of k-connectedness, given in Chapter 1.4, is somewhat unintuitive. It does not tell us much about ‘connections’ in a k-connected graph: all it says is that we need at least k vertices to disconnect it. The following definition—which, incidentally, implies the one above—might have been more descriptive: ‘a graph is k-connected if any two of its vertices can be joined by k independent paths’. It is one of the classic results of graph theory that these two definitions are in fact equivalent, are dual aspects of the same property. We shall study this theorem of Menger (1927) in some depth in Section 3.3. In Sections 3.1 and 3.2, we investigate the structure of the 2-connected and the 3-connected graphs. For these small values of k it is still possible to give a simple general description of how these graphs can be constructed. In Sections 3.4 and 3.5 we look at other concepts of connectedness, more recent than the standard one but no less important: the number of H-paths in G for a subgraph H of G, and the existence of disjoint paths in G linking up specified pairs of vertices.
3.1 2-Connected graphs and subgraphs
The simplest 2-connected graphs are the cycles. All the others can be constructed inductively from a cycle by adding paths:
Proposition 3.1.1. A graph is 2-connected if and only if it can be [4.2.6] constructed from a cycle by successively adding H-paths to graphs H already constructed (Fig. 3.1.1).
Proof. Clearly, every graph constructed as described is 2-connected. Conversely, let a 2-connected graph G be given. Then G contains a
R. Diestel, Graph Theory, Graduate Texts in Mathematics 173, DOI 10.1007/978-3-662-53622-3_
© Reinhard Diestel 2017 59
3


60 3. Connectivity
Fig. 3.1.1. The construction of 2-connected graphs
H cycle, and hence has a maximal subgraph H constructible as above. Since any edge xy ∈ E(G) E(H) with x, y ∈ H would define an Hpath, H is an induced subgraph of G. Thus if H = G, then by the connectedness of G there is an edge vw with v ∈ G − H and w ∈ H. As G is 2-connected, G − w contains a v–H path P . Then wvP is an H-path in G, and H ∪ wvP is a constructible subgraph of G larger than H. This contradicts the maximality of H.
Just as an arbitrary graph can be decomposed into its maximal connected subgraphs, or components, we can try to decompose a connected graph G into its maximal 2-connected subgraphs. These may not quite be disjoint, and they may not quite cover all of G. However, it is easy to weaken the notion of ‘maximal 2-connected subgraph’ slightly so that the subgraphs fitting the weaker notion do cover G and are still nearly disjoint. These ‘blocks’ fit together nicely in a tree-like fashion, which captures precisely the overall structure of G in terms of those blocks. block Formally, a block is a maximal connected subgraph without a cutvertex.1 Thus, every block is either a maximal 2-connected subgraph, or a bridge (with its ends), or an isolated vertex. Conversely, every such subgraph is a block. By their maximality, different blocks of G overlap in at most one vertex, which is then a cutvertex of G. Hence every edge of G lies in a unique block, and G is the union of its blocks. Cycles and bonds are confined to a single block:
[4.6] Lemma 3.1.2. Let G be any graph. (i) The cycles of G are precisely the cycles of its blocks. (ii) The bonds of G are precisely the minimal cuts of its blocks.
Proof. (i) Any cycle in G is a connected subgraph without a cutvertex, and hence lies in some maximal such subgraph. By definition, this is a block of G. (ii) The proof follows easily by repeated application of the following observation. Consider any cut in G. Let xy be one of its edges, and B
1 . . . of the subgraph; it may contain cutvertices of G.


3.1 2-Connected graphs and subgraphs 61
the block containing it. By the maximality of B in the definition of a block, G contains no B-path. Hence every x–y path of G lies in B, so those edges of our cut that lie in B separate x from y even in G.
As every edge lies in a unique block, belonging to a common block is an equivalence relation on the edge set of a graph. This equivalence can be expressed in two other interesting ways:
Lemma 3.1.3. The following statements are equivalent for distinct [4.6] edges e, f of a graph G: (i) The edges e, f belong to a common block of G. (ii) The edges e, f belong to a common cycle in G. (iii) The edges e, f belong to a common bond of G.
Proof. (i)→(ii) It clearly suffices to prove that in a 2-connected graph any two 2-sets of vertices can be joined by two disjoint paths. This follows easily by induction based on Proposition 3.1.1.2 (ii)→(iii) Deleting e and f from a cycle C e, f leaves a partition of V (C) into two connected sets. Extend this to a partitition into two connected sets of the vertex set of the component of G containing C. (How?) The edges between these sets form a bond of G containing e and f . (iii)→(i) By Lemma 3.1.2 (ii), two edges can lie in a common bond only if they belong to the same block.
Our last lemma on blocks shows how they fit together to form the coarse structure of G. Let A denote the set of cutvertices of G, and B the set of its blocks. We then have a natural bipartite graph on A ∪ B
formed by the edges aB with a ∈ B. This block graph of G is shown in block
graph
Figure 3.1.2.
a
a
a
a
B
B
BB
Fig. 3.1.2. A graph and its block graph
Lemma 3.1.4. The block graph of a connected graph is a tree.
2 See Exercise 5. Note that this is the case k = 2 of Menger’s theorem (3.3.1).


62 3. Connectivity
Lemma 3.1.4 generalizes to graphs of higher connectivity: every (k − 1)-connected graph has a canonical tree-like decomposition that separates all its ‘k-blocks’. See Theorem 12.3.7 for the precise statement, and Exercise 17 in Chapter 12 for the case of k = 3.
3.2 The structure of 3-connected graphs
In this section we describe how every 3-connected graph can be obtained from a K4 by a succession of elementary operations preserving 3-connectedness. We then prove a theorem of Tutte about the algebraic structure of the cycle space of 3-connected graphs; this will play an important role again in Chapter 4.5. Proposition 3.1.1 describes how the 2-connected graphs can be constructed inductively, starting from a cycle. All the graphs constructed in the process were themselves 2-connected, so the graphs constructible in this way are precisely the 2-connected graphs. We shall now do something similar for 3-connected graphs. We shall prove that every 3-connected graph G = K4 can be turned into a smaller 3-connected graph in two ways: by deleting an edge (and suppressing any vertices of degree 2 that may arise), and by contracting an edge. Inverting these processes will give us two independent ways of building all 3-connected graphs from a K4.
Given an edge e in a graph G, let us write G .− e for the multigraph
G .− e
obtained from G − e by suppressing any end of e that has degree 2 in G − e.3
Lemma 3.2.1. Let e be an edge in a graph G. If G .− e is 3-connected, then so is G.
(1.4.2) Proof. Thinking of G as obtained from G .− e by adding e, let us call
the vertices of G .− e the old vertices of G, and any other vertex of G
(which will be an end of e) a new vertex. Remembering that G .− e, being 3-connected, has no parallel edges, it is easy to see that, in G, no two vertices x1, x2 can separate a new vertex from all the old vertices. So it suffices to show that {x1, x2} cannot separate two old vertices. If they
did, then those old vertices would be separated in G .− e by x′1 and x′2,
where either x′i = xi or, if xi is new, x′i is the edge of G .− e subdivided
by xi. By Proposition 1.4.2, this contradicts our assumption that G .− e is 3-connected.
3 See Chapter 1.10 for the formal definition of suppressing vertices in a multigraph. Recall also that 3-connected multigraphs cannot have multiple edges. Since parallel edges arising when a vertex is suppressed are not deleted, our assumption in
Lemma 3.2.1 that the multigraph G .− e is 3-connected implies that no parallel edges
arise when it is formed from the graph G. Thus G .− e, too, is in fact a graph.


3.2 The structure of 3-connected graphs 63
Lemma 3.2.2. Every 3-connected graph G = K4 has an edge e such
that G .− e is another 3-connected graph.
Proof. We start by showing that G contains a T K4. Let C be a shortest
cycle and P = u . . . v a C- path in G. Then P ̊ = ∅ since C is induced, so G − {u, v} contains a C–P path Q. Now C ∪ P ∪ Q = T K4. As G = K4, there is a 3-connected graph J G such that G contains a T J. Choose J with ‖J‖ maximum, and then H = T J ⊆ G with ‖H‖ J
maximum. We shall find an edge e such that G .− e J. H Clearly H = G. Let P = u . . . v be an H- path in G, chosen if possible so that
u and v do not lie on the same (subdivided) edge of J. (∗)
If P does not satisfy (∗) then H = J; for since G is 3-connected, the
P = u...v
vertices subdividing an edge of J could be joined by an H- path to a vertex not on the same subdivided edge of J. Our assumption that P does not satisfy (∗) thus implies that uv ∈ E(J) = E(H). Since G has no parallel edges, P has an inner vertex. Now (H − uv) ∪ P is another T J with more edges than H, contradicting our choice of H. Therefore P does satisfy (∗). Suppressing any vertices of degree 2
in H ∪ P we obtain a multigraph J′ such that J′ .− e = J, where e is the edge corresponding to P . By (∗) the edge e is not parallel to an edge of J, so J′ is in fact a graph. By Lemma 3.2.1, J′ is 3-connected. Hence J′ G by the maximality of J, completing the proof.
Theorem 3.2.3. (Tutte 1966)
A graph G is 3-connected if and only if there exists a sequence G0, . . . , Gn of graphs such that
(i) G0 = K4 and Gn = G;
(ii) Gi+1 has an edge e such that Gi = Gi+1 .− e, for every i < n.
Moreover, the graphs in any such sequence are all 3-connected.
Proof. If G is 3-connected, use Lemma 3.2.2 to find Gn, . . . , G0 in turn. Conversely, if G0, . . . , Gn is any sequence of graphs satisfying (i) and (ii), then all these graphs, and in particular G = Gn, are 3-connected by Lemma 3.2.1.
Theorem 3.2.3 enables us to construct, recursively, the entire class of 3-connected graphs. Starting from K4, we simply add to every graph already constructed a new edge in every way compatible with (ii): between two already existing vertices, between newly inserted subdividing vertices (not on the same edge), or between one old vertex and one new subdividing vertex.


64 3. Connectivity
We now turn to our second method of reducing 3-connected graphs to K4, by contracting edges. In what follows we only consider graphs, not multigraphs.
[4.4.3] Lemma 3.2.4. Every 3-connected graph G = K4 has an edge e such that G/e is again 3-connected.
xy Proof. Suppose there is no such edge e. Then, for every edge xy ∈ G, the graph G/xy contains a separator S of at most 2 vertices. Since κ(G) 3, the contracted vertex vxy of G/xy (see Chapter 1.7) lies z in S and |S| = 2, i.e. G has a vertex z ∈/ {x, y} such that {vxy, z} separates G/xy. Then any two vertices separated by {vxy, z} in G/xy are separated in G by T := {x, y, z}. Since no proper subset of T separates G, C every vertex in T has a neighbour in every component C of G − T . We choose the edge xy, the vertex z, and the component C so that v |C| is as small as possible, and pick a neighbour v of z in C (Fig. 3.2.1). By assumption, G/zv is again not 3-connected, so again there is a vertex w w such that {z, v, w} separates G, and as before every vertex in {z, v, w} has a neighbour in every component of G − {z, v, w}.
xx
y y
z
TC
v
z v w D
D
Fig. 3.2.1. Separating vertices in the proof of Lemma 3.2.4
As x and y are adjacent, G − {z, v, w} has a component D such that D ∩ {x, y} = ∅. Then every neighbour of v in D lies in C (since v ∈ C), so D ∩ C = ∅ and hence D C by the choice of D. This contradicts the choice of xy, z and C.
Theorem 3.2.5. (Tutte 1961)
A graph G is 3-connected if and only if there exists a sequence G0, . . . , Gn of graphs with the following two properties:
(i) G0 = K4 and Gn = G;
(ii) Gi+1 has an edge xy such that d(x), d(y) 3 and Gi = Gi+1/xy, for every i < n.
Moreover, the graphs in any such sequence are all 3-connected.


3.2 The structure of 3-connected graphs 65
C1 C2
S
xy
Fig. 3.2.2. The position of xy ∈ Gi+1 in the proof of Theorem 3.2.5
Proof. If G is 3-connected, then by Lemma 3.2.4 there is a sequence Gn, . . . , G0 of 3-connected graphs satisfying (i) and (ii). Conversely, and to show the final statement of the theorem, let G0, . . . , Gn be a sequence of graphs satisfying (i) and (ii); we show that if Gi is 3-connected then so is Gi+1, for every i < n. Suppose not, let S be a separator of at most 2 vertices in Gi+1, and let C1, C2 be two components of Gi+1 − S. As x and y are adjacent, we may assume that {x, y} ∩ V (C1) = ∅ (Fig. 3.2.2). Then C2 contains neither both vertices x, y nor a vertex v ∈/ {x, y}: otherwise vxy or v would be separated from C1 in Gi by at most two vertices, a contradiction. But now C2 contains only one vertex: either x or y. This contradicts our assumption of d(x), d(y) 3.
Like Theorem 3.2.3, Theorem 3.2.5 enables us to construct all 3-connected graphs inductively from K4, by simple local alterations and without ever leaving the class of 3-connected graphs. Given a 3connected graph already constructed, pick any vertex v and split it into two adjacent vertices v′, v′′; then join these to all the former neighbours of v, each to at least two. This is the essential core of a result of Tutte known as his wheel theorem.4
For larger integers k it is no longer true that in any k-connected graph we can contract an edge so as to obtain another k-connected graph. However, for every k there is a constant nk such that in every k-connected graph we can either delete or contract an edge so that the resulting graph has no separation of order less than k in which both sides have at least nk vertices. See the notes.
Theorem 3.2.6. (Tutte 1963) [4.5.2] The cycle space of a 3-connected graph is generated by its non-separating induced cycles.
Proof. Let G be a fixed 3-connected graph, of order n say. We prove that each of its cycles C is a sum of non-separating induced cycles, applying induction on k(C) := n − b, where b denotes the largest order k of a component of G − C if there is one, and b = 0 if V (C) = V (G).
4 Graphs of the form Cn ∗ K1 are called wheels; thus, K4 is the smallest wheel. wheel


66 3. Connectivity
There are no cycles C for which k(C) = 0, so the induction starts. C Now let C be given for the induction step. If C is a spanning cycle, it is the sum of two cycles C1, C2 ⊆ C + e, where e a chord. As k(C1), k(C2) < n = k(C), we are home by induction. B Assume now that G − C = ∅, and let B be a largest component of G − C. Suppose first that
G − B contains a C- path P = u . . . v such that each of the
two u–v paths on C has an inner vertex in N (B). (∗)
P
v
C
u
B
C1
C2
Fig. 3.2.3. C1 and C2 are drawn in broken lines
Then C is the sum of the two cycles C1, C2 ⊆ C ∪ P containing P , and for each of these Ci there is a component of G − Ci that contains B properly (Fig. 3.2.3). Hence k(Ci) < k(C), and we are again home by induction. Suppose finally that (∗) fails. Then every vertex of C sends an edge to B. (Indeed, if not then C contains an N (B)- path Q = x . . . y with
Q ̊ = ∅. As G is 3-connected, C − Q = ∅, and there is a Q ̊ – (C − Q) path in G − {x, y}. Such a path P would satisfy (∗).) Since V (C) = N (B), any chord of C would also be a path P as in (∗), so C has no chord. Hence unless C itself is induced and non-separating, G − C has a component B′ = B. Let P = u . . . v be a C- path through B′, and let Q be a C–P
P
B′
Q
v
C
u
B
C1
C2
C3
Fig. 3.2.4. Three cycles C1, C2, C3 summing to C, and each missing a vertex of C that sends an edge to B


3.2 The structure of 3-connected graphs 67
path in G − {u, v}. Note that Q too avoids B. Now C ∪ P ∪ Q contains three cycles C1, C2, C3 summing to C and each missing a vertex of C (Fig. 3.2.4). As every vertex of C sends an edge to B, we therefore have k(Ci) < k(C) for every i, completing the induction step.
3.3 Menger’s theorem
The following theorem is one of the cornerstones of graph theory.
Theorem 3.3.1. (Menger 1927)
Let G = (V, E) be a graph and A, B ⊆ V . Then the minimum number
[3.5.2] [8.2.5] [8.4.1] [12.4.3] [12.6.3]
of vertices separating A from B in G is equal to the maximum number of disjoint A–B paths in G.
We offer three proofs. Whenever G, A, B are given as in the theorem, we denote by k = k (G, A, B) the minimum number of vertices separating k A from B in G. Clearly, G cannot contain more than k disjoint A–B paths; our task will be to show that k such paths exist.
First proof. We apply induction on ‖G‖. If G has no edge, then |A ∩ B| = k and we have k trivial A–B paths. So we assume that G has an edge e = xy. If G has no k disjoint A–B paths, then neither does G/e; here, we count the contracted vertex ve as an element of A (resp. B) in G/e if in G at least one of x, y lies in A (resp. B). By the induction hypothesis, G/e contains an A–B separator Y of fewer than k vertices. Among these must be the vertex ve, since otherwise Y ⊆ V would be an A–B separator in G. Then X := (Y {ve}) ∪ {x, y} is an A–B separator in G of exactly k vertices. We now consider the graph G − e. Since x, y ∈ X, every A–X separator in G − e is also an A–B separator in G and hence contains at least k vertices. So by induction there are k disjoint A–X paths in G − e, and similarly there are k disjoint X–B paths in G − e. As X separates A from B, these two path systems do not meet outside X, and can thus be combined to k disjoint A–B paths.
Let P be a set of disjoint A–B paths, and let Q be another such set. We say that Q exceeds P if the set of vertices in A that lie on a path in exceeds P is a proper subset of the set of vertices in A that lie on a path in Q, and likewise for B. Then, in particular, |Q| |P| + 1.
Second proof. We prove the following stronger statement:
If P is any set of fewer than k disjoint A–B paths in G, then G contains a set of |P| + 1 disjoint A–B paths exceeding P.


68 3. Connectivity
Keeping G and A fixed, we let B vary and apply induction on | ⋃ P|. Let R be an A–B path that avoids the (fewer than k) vertices of B that lie on a path in P. If R avoids all the paths in P, then P ∪ {R} exceeds P, as desired. (This will happen when P = ∅, so the induction starts.) If not, let x be the last vertex of R that lies on some P ∈ P (Fig. 3.3.1).
AB
R
P
x xP
xR
P
Fig. 3.3.1. Paths in the second proof of Menger’s theorem
Put
B′ := B ∪ V (xP ∪ xR) and P′ := (P {P }) ∪ {P x} .
Then |P′| = |P| (but | ⋃ P′| < | ⋃ P|) and k(G, A, B′) k(G, A, B), so by the induction hypothesis there is a set Q′ of |P′| + 1 disjoint AB′ paths exceeding P′. Then Q′ contains a path Q ending in x, and a unique path Q′ whose last vertex y is not among the last vertices of the paths in P′. If y ∈/ xP , we let Q be obtained from Q′ by adding xP to Q, and adding yR to Q′ if y ∈/ B. Otherwise y ∈ x ̊P , and we let Q be obtained from Q′ by adding xR to Q and adding yP to Q′. In all cases Q exceeds P, as desired.
Applied to a bipartite graph, Menger’s theorem specializes to the assertion of Ko ̈nig’s theorem (2.1.1). For our third proof, we shall adapt the alternating path proof of Ko ̈nig’s theorem to the more general setP up of Theorem 3.3.1. Let again G, A, B be given, and let P be a set of disjoint A–B paths in G. Let us say that an A–B separator X ⊆ V on lies on P if it consists of a choice of exactly one vertex from each path in P. If we can find such a separator X, then clearly k |X| = |P|, and Menger’s theorem will be proved. Put
V [P] := ⋃{ V (P ) | P ∈ P }
E[P] := ⋃{ E(P ) | P ∈ P } .
W, xi, ei Let a walk W = x0e0x1e1 . . . en−1xn in G with ei = ej for i = j be said to alternate with respect to P (Fig. 3.3.2) if it starts in A V [P] and the following three conditions hold for all i < n (with e−1 := e0 in (iii)):
alternating walk


3.3 Menger’s theorem 69
(i) if ei = e ∈ E[P], then W traverses the edge e backwards, i.e. xi+1 ∈ P x ̊i for some P ∈ P;
(ii) if xi = xj with i = j, then xi ∈ V [P];
(iii) if xi ∈ V [P], then {ei−1, ei} ∩ E[P] = ∅.
P
x0
xn
A
B
W
Fig. 3.3.2. An alternating walk from A to B
Note that, by (ii), any vertex outside V [P] occurs at most once on W . And since the edges ei of W are all distinct, (iii) implies that any vertex v ∈ V [P] occurs at most twice on W . For v = xn, this can happen in exactly the following two ways. If xi = xj with 0 < i < j < n, then
either ei−1, ej ∈ E[P] and ei, ej−1 ∈/ E[P]
or ei, ej−1 ∈ E[P] and ei−1, ej ∈/ E[P] .
Unless otherwise stated, any use of the word ‘alternate’ below will refer to our fixed path system P. The next two lemmas together make up our third proof of Menger’s theorem. We state and prove them in a way that makes them reusable in Chapter 8, when we prove Menger’s theorem for infinite graphs.
Lemma 3.3.2. If an alternating walk W as above ends in B V [P], [8.4.5] then G contains a set of disjoint A–B paths exceeding P.
Proof. We may assume that W has only its first vertex in A V [P] and only its last vertex in B V [P]. Let H be the graph on V (G) whose edge set is the symmetric difference of E[P] with {e0, . . . , en−1}. In H, the ends of the paths in P and of W have degree 1 (or 0, if the path or W is trivial), and all other vertices have degree 0 or 2. For each vertex a ∈ (A ∩ V [P]) ∪ {x0}, therefore, the component of H containing a is a path, P = v0 . . . vk say, which starts in a and ends in A or B. Using conditions (i) and (iii), one easily shows by induction on i = 0, . . . , k − 1 that P traverses each of its edges e = vivi+1 in the
forward direction with respect to P or W . (Formally: if e ∈ P ′ with P ′ ∈ P, then vi ∈ P ′v ̊i+1; if e = ej ∈ W , then vi = xj and vi+1 = xj+1.) Hence, P is an A–B path. (When G is infinite, this last conclusion uses


70 3. Connectivity
the fact that W meets only finitely many paths in P, and hence every component of H is finite.) Similarly, for every b ∈ (B ∩ V [P]) ∪ {xn} there is an A–B path in H that ends in b. The set of A–B paths in H therefore exceeds P.
[8.4.5] Lemma 3.3.3. If no alternating walk W as above ends in B V [P], then G contains an A–B separator on P.
Proof. Let
A1, A2 A1 := A ∩ V [P] and A2 := A A1 , and
B1, B2 B1 := B ∩ V [P] and B2 := B B1 .
xP For every path P ∈ P, let xP be the last vertex of P that lies on some alternating walk; if no such vertex exists, let xP be the first vertex of P . Our aim is to show that
X X := { xP | P ∈ P }
meets every A–B path in G; then X is an A–B separator on P. Q Suppose there is an A–B path Q that avoids X. We know that Q meets V [P], as otherwise it would be an alternating walk ending in B2. Now the A–V [P] path in Q is either an alternating walk or consists only of the first vertex of some path in P. Therefore Q also meets the vertex set V [P′] of
P′ P′ := { P xP | P ∈ P } .
y, P, x Let y be the last vertex of Q in V [P′], say y ∈ P ∈ P, and let x := xP . As Q avoids X and hence x, we have y ∈ P x ̊. In particular, x = xP is W not the first vertex of P , and so there is an alternating walk W ending at x. Then W ∪ xP yQ is a walk from A2 to B (Fig. 3.3.3). If this walk alternates and ends in B2, we have our desired contradiction.
P
Q
W
y
x
z yQ
Fig. 3.3.3. Alternating walks in the proof of Lemma 3.3.3.


3.3 Menger’s theorem 71
How could W ∪ xP yQ fail to alternate? For example, W might already use an edge of xP y. But if x′ is the first vertex of W on xP y ̊, x′, W ′ then W ′ := W x′P y is an alternating walk from A2 to y. (By W x′ we
mean the initial segment of W ending at the first occurrence of x′ on W ; from there, W ′ follows P back to y.) Even our new walk W ′yQ need not yet alternate: for example, W ′ might still meet y ̊Q. By definition of P′ and W , however, and the choice of y on Q, we have
V (W ′) ∩ V [P] ⊆ V [P′] and V (y ̊Q) ∩ V [P′] = ∅ .
Thus, W ′ and y ̊Q can meet only outside P. If W ′ does indeed meet y ̊Q, we let z be the first vertex of W ′ on y ̊Q z and set W ′′ := W ′zQ. Otherwise we set W ′′ := W ′ ∪ yQ. In both cases W ′′ W ′′ alternates with respect to P′, because W ′ does and y ̊Q avoids V [P′]. (W ′′ satisfies condition (iii) at y in the second case even if y occurs twice on W ′, because W ′′ then contains the entire walk W ′ and not just its initial segment W ′y.) By definition of P′, therefore, W ′′ avoids V [P] V [P′]. Thus W ′′ also alternates with respect to P and ends in B2, contrary to our assumptions.
Third proof of Menger’s theorem. Let P contain as many disjoint A–B paths in G as possible. Then by Lemma 3.3.2, no alternating walk ends in B V [P]. By Lemma 3.3.3, this implies that G has an A–B separator X on P, giving k |X| = |P| as desired.
A set of a–B paths is called an a–B fan if any two of the paths have fan only a in common.
Corollary 3.3.4. For B ⊆ V and a ∈ V B, the minimum number of [10.1.2] vertices separating a from B in G is equal to the maximum number of paths forming an a–B fan in G.
Proof. Apply Theorem 3.3.1 to G − a with A := NG(a).
Corollary 3.3.5. Let a and b be two distinct vertices of G.
(i) If ab ∈/ E, then the minimum number of vertices separating a from b in G is equal to the maximum number of independent a–b paths in G.
(ii) The minimum number of edges separating a from b in G is equal to the maximum number of edge-disjoint a–b paths in G.
Proof. (i) Apply Theorem 3.3.1 to G − {a, b}, with A := NG(a) and B := NG(b). (ii) Apply Theorem 3.3.1 to the line graph of G, with A := E(a) and B := E(b).


72 3. Connectivity
Theorem 3.3.6. (Global Version of Menger’s Theorem)
[4.2.7] [6.6.1]
[9.4.2] (i) A graph is k-connected if and only if it contains k independent paths between any two vertices.
(ii) A graph is k-edge-connected if and only if it contains k edgedisjoint paths between any two vertices.
Proof. (i) If a graph G contains k independent paths between any two vertices, then |G| > k and G cannot be separated by fewer than k vertices; thus, G is k-connected. Conversely, suppose that G is k-connected (and, in particular, has a, b more than k vertices) but contains vertices a, b not linked by k indepenG′ dent paths. By Corollary 3.3.5 (i), a and b are adjacent; let G′ := G − ab. Then G′ contains at most k − 2 independent a–b paths. By Corollary X 3.3.5 (i), we can separate a and b in G′ by a set X of at most k − 2 v vertices. As |G| > k, there is at least one further vertex v ∈/ X ∪ {a, b} in G. Now X separates v in G′ from either a or b—say, from a. But then X ∪ {b} is a set of at most k − 1 vertices separating v from a in G, contradicting the k-connectedness of G. (ii) follows straight from Corollary 3.3.5 (ii).
3.4 Mader’s theorem
In analogy to Menger’s theorem we may consider the following question: given a graph G with an induced subgraph H, up to how many independent H-paths can we find in G? In this section, we present without proof a deep theorem of Mader, which solves the above problem in a fashion similar to Menger’s theorem. Again, the theorem says that an upper bound on the number of such paths that arises naturally from the size of certain separators is indeed attained by some suitable set of paths. X What could such an upper bound look like? Clearly, if X ⊆ V (G − H) F and F ⊆ E(G − H) are such that every H-path in G has a vertex or an edge in X ∪ F , then G cannot contain more than |X ∪ F | independent H-paths. Hence, the least cardinality of such a set X ∪ F is a natural upper bound for the maximum number of independent H-paths. (Note that every H-path meets G − H, because H is induced in G and edges of H do not count as H-paths.) In contrast to Menger’s theorem, this bound can still be improved. The minimality of |X ∪ F | implies that no edge in F has an end in X: otherwise this edge would not be needed in the separator. Let Y := CF V (G − H) X, and denote by CF the set of components of the graph (Y, F ). Since every H-path avoiding X contains an edge from F , it has


3.4 Mader’s theorem 73
∂C
CF
C
HX
Fig. 3.4.1. An H-path in G − X
at least two vertices in ∂C for some C ∈ CF , where ∂C denotes the set ∂C of vertices in C that send an edge of G to G − X − C (Fig. 3.4.1). The number of independent H-paths in G is therefore bounded above by
MH (G) := min
(
|X| + ∑
C ∈CF
⌊1
2 |∂C|⌋)
,
where the minimum is taken over all X and F as described above: X ⊆ X
MH (G)
V (G − H) and F ⊆ E(G − H − X) such that every H-path in G has a vertex or an edge in X ∪ F . Now Mader’s theorem says that this upper bound is always attained by some set of independent H-paths:
Theorem 3.4.1. (Mader 1978)
Given a graph G with an induced subgraph H, there are always MH (G) independent H-paths in G.
In order to obtain direct analogues to the vertex and edge version of Menger’s theorem, let us consider the two special cases of the above problem where either F or X is required to be empty. Given an induced subgraph H ⊆ G, we denote by κH (G) the least cardinality of a vertex κH(G) set X ⊆ V (G − H) that meets every H-path in G. Similarly, we let λH (G) denote the least cardinality of an edge set F ⊆ E(G) that meets λH(G) every H-path in G.
Corollary 3.4.2. Given a graph G with an induced subgraph H, there are at least 1
2 κH (G) independent H-paths and at least 1
2 λH (G) edge
disjoint H-paths in G.
Proof. To prove the first assertion, let k be the maximum number of inde- k pendent H-paths in G. By Theorem 3.4.1, there are sets X ⊆ V (G − H) and F ⊆ E(G − H − X) with
k = |X| + ∑
C ∈CF
⌊1
2 |∂C|⌋


74 3. Connectivity
such that every H-path in G has a vertex in X or an edge in F . For every C ∈ CF with ∂C = ∅, pick a vertex v ∈ ∂C and let YC := ∂C {v};
if ∂C = ∅, let YC := ∅. Then ⌊ 1
2 |∂C|⌋ 1
2 |YC | for all C ∈ CF . Moreover,
for Y := ⋃
C ∈CF YC every H-path has a vertex in X ∪ Y . Hence
Y
k |X| + ∑
C ∈CF
1
2 |YC | 1
2 |X ∪ Y | 1
2 κH (G)
as claimed. The second assertion follows from the first by considering the line graph of G (Exercise 25).
It may come as a surprise to see that the bounds in Corollary 3.4.2 are best possible (as general bounds): one can find examples for G and H where G contains no more than 1
2 κH (G) independent H-paths or no
more than 1
2 λH (G) edge-disjoint H-paths (Exercises 26 and 27).
3.5 Linking pairs of vertices
Let G be a graph, and let X ⊆ V (G) be a set of vertices. We call X linked linked in G if whenever we pick distinct vertices s1, . . . , s , t1, . . . , t in X we can find disjoint paths P1, . . . , P in G such that each Pi links si to ti and has no inner vertex in X. Thus, unlike in Menger’s theorem, we are not merely asking for disjoint paths between two sets of vertices: we insist that each of these paths shall link a specified pair of endvertices. If |G| 2k and every set X of at most 2k vertices is linked in G, k-linked then G is k-linked . Clearly, this is equivalent to requiring merely that |G| 2k and disjoint paths Pi = si . . . ti exist for every choice of exactly 2k distinct vertices s1, . . . , sk, t1, . . . , tk: just add dummy vertices to X to bring it up to size 2k. In practice, the latter is easier to prove, because we need not worry about inner vertices in X. Clearly, every k-linked graph is k-connected. The converse, however, seems far from true: being k-linked is clearly a much stronger property than k-connectedness. Still, we shall prove in this section that we can force a graph to be k-linked by assuming that it is f (k)-connected, for some function f : N → N. We first borrow a lemma from Chapter 7 to give a nice and simple proof that such a function f exists at all. In the remainder of the section we then prove that f can even be chosen linear. The basic idea in the simple proof is as follows. If we can prove that G contains a subdivision K of a large complete graph, we can use Menger’s theorem to link the vertices of X disjointly to branch vertices of K, and then hope to pair them up as desired through the subdivided edges of K. This requires, of course, that our paths do not hit too many of the subdivided edges before reaching the branch vertices of K.


3.5 Linking pairs of vertices 75
The lemma saying that large enough connectivity does indeed force the existence of such a complete topological minor K will be proved in Chapter 7.2, where we consider several results of this type. By Theorem 1.4.3 it suffices to assume that G has large average degree:
Lemma 3.5.1. There is a function h: N → N such that, for every r ∈ N, every graph of average degree at least h(r) contains Kr as a topological minor.
Theorem 3.5.2. (Jung 1970; Larman & Mani 1970)
There is a function f : N → N such that every f (k)-connected graph is k-linked, for all k ∈ N.
Proof. We prove the assertion for f (k) = h(3k) + 2k, where h is a (3.3.1) function as in Lemma 3.5.1. Let G be an f (k)-connected graph. Then G d(G) δ(G) κ(G) h(3k); let K be a T K3k in G as provided by K Lemma 3.5.1, and let U denote its set of branch vertices. U For the proof that G is k-linked, let distinct vertices s1, . . . , sk si, ti and t1, . . . , tk be given. By definition of f (k), we have κ(G) 2k. Hence by Menger’s theorem (3.3.1), G contains disjoint paths P1, . . . , Pk, Q1, . . . , Qk, such that each Pi starts in si, each Qi starts in ti, and all Pi, Qi these paths end in U but have no inner vertices in U . Let the set P of P these paths be chosen so that their total number of edges outside E(K) is as small as possible.
si
Pi
P
Li
vi
ui
Mi
Qi ti
wi
Fig. 3.5.1. Constructing an si–ti path via ui
Let u1, . . . , uk be those k vertices in U that are not an end of a path in P. For each i = 1, . . . , k, let Li be the U -path in K (i.e., the
subdivided edge of the K3k) from ui to the end of Pi in U , and let vi be the first vertex of Li on any path P ∈ P. By definition of P, P has no more edges outside E(K) than P viLiui does, so viP = viLi and hence P = Pi (Fig. 3.5.1). Similarly, if Mi denotes the U -path in K from ui to the end of Qi in U , and wi denotes the first vertex of Mi on any path in P, then this path is Qi. Then the paths siPiviLiuiMiwiQiti are disjoint for different i and show that G is k-linked.
The function h of Lemma 3.5.1 which our proof in Chapter 7.2 will yield will be exponential in r, and will therefore give only an exponential upper bound for the function f (k) in Theorem 3.5.2. As


76 3. Connectivity
2ε(G) δ(G) κ(G), the following result implies the linear bound of f (k) = 16k:
[7.2.3] Theorem 3.5.3. (Thomas & Wollan 2005)
Let G be a graph and k ∈ N. If G is 2k-connected and ε(G) 8k, then G is k-linked.
We begin our proof of Theorem 3.5.3 with a lemma.
Lemma 3.5.4. Any graph H with δ(H) 8k |H|/2 has a k-linked subgraph.
Proof. If H itself is k-linked there is nothing to show, so suppose not. X Then we can find a set X of 2k vertices s1, . . . , sk, t1, . . . , tk that cannot P be linked in H by disjoint paths Pi = si . . . ti. Let P be a set of as many such paths as possible, without inner vertices in X and all of length
at most 7. If there are several such sets P, we choose one with | ⋃ P| s1, t1 minimum. We may assume that P contains no path from s1 to t1. Let J be the subgraph of H induced by X and all the vertices on the paths J, K in P, and let K := H − J. Note that each vertex v ∈ K has at most three neighbours on any given Pi ∈ P: if it had four, then replacing the segment uPiw between
its first and its last neighbour on Pi by the path uvw would reduce | ⋃ P| and thus contradict our choice of P. So v has at most 3 neighbours in J for every i = 1, . . . , k, at most 3k in total. As δ(H) 8k by assumption, as well as |H| 16k and |X| = 2k, we deduce that
δ(K) 5k and |K| 14k . (1)
Our next aim is to show that K is disconnected. Since each of the paths in P has at most eight vertices, we have |J − {s1, t1}| 8(k − 1). Therefore s1 has a neighbour s in K, and t1 has a neighbour t in K. Put
S := { s′ ∈ K | dK (s, s′) 2 } and T := { t′ ∈ K | dK (t, t′) 2 }. Since
H − ⋃ P contains no s1–t1 path of length at most 7, we have S ∩ T = ∅, and there is no S–T edge in K. To prove that K is disconnected, it thus suffices to show that V (K) = S ∪ T . But for any vertex v ∈ K − (S ∪ T ) the sets NK(s), NK(t) and NK(v) are disjoint and each have size at least 5k, contradicting (1). So K is disconnected; let C be its smaller component. By (1),
2δ(C) 2δ(K) 7k + 3k 1
2 |K| + 3k |C| + 3k . (2)
We complete the proof by showing that C is k-linked. As δ(C) 5k, we have |C| 2k. Let Y be a set of at most 2k vertices in C. By (2), every two vertices in Y have at least 3k common neighbours, at least k of which lie outside Y . We can therefore link any desired k pairs of vertices in Y inductively by paths of length 2 whose inner vertex lies outside Y .


3.5 Linking pairs of vertices 77
Before we launch into the proof of Theorem 3.5.3, let us look at its main ideas. To prove that G is k-linked, we have to consider a given set X of up to 2k vertices and show that X is linked in G. Ideally, we would like to use Lemma 3.5.4 to find a linked subgraph L somewhere in G, and then use our assumption of κ(G) 2k to obtain a set of |X| disjoint X–L paths by Menger’s theorem (3.3.1). Then X could be linked via these paths and L, completing the proof. Unfortunately, we cannot expect to find a subgraph H such that δ(H) 8k and |H| 16k (in which L could be found by Lemma 3.5.4); cf. Corollary 11.2.3. However, it is not too difficult to find a minor H G that has such a subgraph (Ex. 21, Ch. 7), even so that the vertices of X come to lie in distinct branch sets of H. We may then regard X as a subset of V (H), and Lemma 3.5.4 provides us with a linked subgraph L of H. The only problem now is that H need no longer be 2k-connected, that is, our assumption of κ(G) 2k will not ensure that we can link X to L by |X| disjoint paths in H. And here comes the clever bit of the proof: it relaxes the assumption of κ 2k to a weaker assumption that does get passed on to H. This weaker assumption is that if we can separate X from another part of G (or H) by fewer than |X| vertices, then this other part must be ‘light’: roughly, its own value of ε must not exceed 8k. If X then fails to link to L by |X| disjoint paths, and hence H has a separation {A, B} with X ⊆ A and L ⊆ B and |A ∩ B| < |X|, we know that ε is still at least 8k on H[A], because the B-part of H was light. The idea now is to continue the proof inside H′ := H[A] by induction. This still needs some ingenuity, since it is not enough that ε is large on H′: we also need that for every low-order separation (A′, B′) of H′ with X ⊆ A′ the B′-part is light. That need not be true. But when it fails, we shall be able to use induction on H′[B′] to show that A′ ∩ B′ is linked in H′[B′], and use this for our proof that X is linked in H.
Given k ∈ N, a graph G, and A, B, X ⊆ V (G), call the ordered X
separation
pair (A, B) an X- separation of G if {A, B} is a proper separation of G of order at most |X| and X ⊆ A. An X- separation (A, B) is small if small/linked |A ∩ B| < |X|, and linked if A ∩ B is linked in G[B].
Call a set U ⊆ V (G) light in G if ‖U ‖+ 8k |U |, where ‖U ‖+ denotes ‖ ‖+ the number of edges of G with at least one end in U . A set of vertices light is heavy if it is not light. heavy
Proof of Theorem 3.5.3. We shall prove the following, for fixed k ∈ N: k
G = (V, E) X
Let G = (V, E) be a graph and X ⊆ V a set of at most 2k vertices. If V X is heavy and for every small X- separation (A, B) the set B A is light, then X is linked in G.
(∗)
To see that (∗) implies the theorem, assume that κ(G) 2k and ε(G) 8k, and let X be a set of exactly 2k vertices. Then G has no


78 3. Connectivity
small X- separation. And V X is heavy, since
‖V X‖+ ‖G‖ −
(2k 2
)
> 8k |V | − 16k2 = 8k |V X| .
By (∗), X is linked in G, completing the proof that G is k-linked. We prove (∗) by induction on |G|, and for each value of |G| by induc
tion on ‖V X‖+. If |G| = 1 then X is linked in G. For the induction step, let G and X be given as in (∗). We first prove the following:
We may assume that G has no linked X- separation. (1)
(A, B) For our proof of (1), suppose that G has a linked X- separation S (A, B). Let us choose one with A minimal, and put S := A ∩ B. We first consider the case that |S| = |X|. If G[A] contains |X| disjoint X–S paths, then X is linked in G because (A, B) is linked, completing the proof of (∗). If not, then by Menger’s theorem (3.3.1) G[A] has a small X- separation (A′, B′) such that B′ ⊇ S. If we choose this of minimum order, i.e. with |A′ ∩ B′| minimum, we can link A′ ∩ B′ to S in G[B′] by |A′ ∩ B′| disjoint paths, again by Menger’s theorem. But then (A′, B′ ∪ B) is a linked X- separation of G that contradicts the choice of (A, B). G′ So |S| < |X|. Let G′ be obtained from G[A] by adding any missing edges on S, so that G′[S] is a complete subgraph of G′. As (A, B) is now a small X- separation, our assumption in (∗) says that B A is light in G. Thus, G′ arises from G by deleting |B A| vertices outside X and at most 8k |B A| edges, and possibly adding some edges. As V X is heavy in G, this implies that
A X is heavy in G′.
In order to be able to apply the induction hypothesis to G′, let us show next that for every small X- separation (A′, B′) of G′ the set (A′, B′) B′ A′ is light in G′. Suppose not, and choose a counterexample (A′, B′) with B′ minimal. As G′[S] is complete, we have S ⊆ A′ or S ⊆ B′. If S ⊆ A′ then B ∩ B′ ⊆ S ⊆ A′, so (A′ ∪ B, B′) is a small Xseparation of G. Moreover,
B′ (A′ ∪ B) = B′ A′,
and no edge of G′ − E on S is incident with this set (Fig 3.5.2). Our assumption that this set is heavy in G′, by the choice of (A′, B′), therefore implies that it is heavy also in G. As (A′ ∪ B, B′) is a small X- separation of G, this contradicts our assumptions in (∗). Hence S ⊆ B′. By our choice of (A′, B′), the graph G′′ := G′[B′] satisfies the premise of (∗) for X′′ := A′ ∩ B′. Indeed, B′ X′′ = B′ A′


3.5 Linking pairs of vertices 79
B
A
A′ B′
X G′
S
Fig. 3.5.2. If S ⊆ A′, then (A′ ∪ B, B′) is an X- separation of G
is heavy, and by the minimality of B′ any small X′′- separation (A′′, B′′) of G′′ will be such that B′′ A′′ is light, because (A′ ∪ A′′, B′′) will be a small X- separation of G′, and B′′ A′′ = B′′ (A′ ∪ A′′). By the induction hypothesis, therefore, X′′ is linked in G′′. But then X′′ is also linked in G[B′ ∪ B]: as S was linked in G[B], we simply replace any edges added on S in the definition of G′ by disjoint paths through B (Fig. 3.5.3). But now (A′, B′ ∪ B) is a linked X- separation of G that violates the minimality of A in the choice of (A, B).
B
A
S
A′ B′
X ′′
G ′′
X
Fig. 3.5.3. If S ⊆ B′, then (A′, B′ ∪ B) is linked in G
We have thus shown that G′ satisfies the premise of (∗) with respect to X. Since {A, B} is a proper separation, G′ has fewer vertices than G. By the induction hypothesis, therefore, X is linked in G′. Replacing edges of G′ − E on S by paths through B as before, we can turn any linkage of X in G′ into one in G, completing the proof of (∗). This completes the proof of (1).
Our next goal is to show that, by the induction hypothesis, we may assume that G has not only large average degree but even large minimum degree. For our proof that X is linked in G, let s1, . . . , s , t1, . . . , t be the distinct vertices in X which we wish to link by disjoint paths Pi = si . . . ti. Let us add to G any missing edges on X except those of the form siti; G[X]


80 3. Connectivity
as the paths Pi are not allowed to have inner vertices in X, these new edges affect neither the premise nor the conclusion in (∗). After this modification, we can now prove the following:
We may assume that any two adjacent vertices u, v which
do not both lie in X have at least 8k − 1 common neighbours. (2)
e = uv To prove (2), let e = uv be such an edge, let n denote the number of n common neighbours of u and v, and let G′ := G/e be the graph obtained G′ by contracting e. Since u, v are not both in X we may view X as a subset also of V ′ := V (G′), replacing u or v in X with the contracted vertex ve
V′
if X ∩ {u, v} = ∅. Our aim is to show that unless n 8k − 1 as desired in (2), G′ satisfies the premise of (∗). Then X will be linked in G′ by the induction hypothesis, so the desired paths P1, . . . , P exist in G′. If one of them contains ve, replacing ve by u or v or uv turns it into a path in G, completing the proof of (∗). In order to show that G′ satisfies the premise of (∗) with respect to X, let us show first that V ′ X is heavy. Since V X was heavy and |V ′ X| = |V X| − 1, it suffices to show that the contraction of e resulted in the loss of at most 8k edges incident with a vertex outside X. If u and v are both outside X, then the number of such edges lost is only n + 1: one edge at every common neighbour of u and v, as well as e. But if u ∈ X, then v ∈/ X, and we lost all the X– v edges xv of G
with x = u, too: while xv counted towards ‖V X‖+, the edge xve lies
in G′[X] and does not count towards ‖V ′ X‖+. If x is not a common neighbour of u and v, then this is an additional loss. But u is adjacent to every x ∈ X {u} except at most one (by our assumption about G[X]), so every such x except at most one is in fact a common neighbour of u and v. Thus in total, we lost at most n + 2 edges. Unless n 8k − 1 (which would prove (2) directly for u and v), this means that we lost at most 8k edges, as desired for our proof that V ′ X is heavy. It remains to show that for every small X- separation (A′, B′) of G′ (A′, B′) the set B′ A′ is light. Let (A′, B′) be a counterexample, chosen with B′ minimal. Then G′[B′], as in the proof of (1), satisfies the premise X′ of (∗) with respect to X′ := A′ ∩ B′. Hence X′ is linked in G′[B′] by induction. Let A and B be obtained from A′ and B′ by replacing ve,
(A, B), X′′ where applicable, with both u and v, and put X′′ := A ∩ B. We shall prove that the separation (A, B) of G contradicts our assumption (1). Let us consider two possible positions of ve in turn. If ve lies
in A′ B′ or B′ A′, then u, v ∈ A B or u, v ∈ B A. Then X′′ = X′ is linked in G[B], because it is linked in G′[B′]: if ve occurs on one of
the linking paths for X′, just replace it by u or v or uv as earlier. This contradicts (1). The other possibility is that ve ∈ X′. We show that
G[B] satisfies the premise of (∗) with respect to X′′; then X′′ will be linked in G[B] by induction, again contradicting (1). Since (A′, B′) is a


3.5 Linking pairs of vertices 81
small X- separation, we have
|X′′| |X′| + 1 |X| 2k .
Moreover, B X′′ = B′ A′ is heavy in G, because it is heavy in G′ by the choice of (A′, B′). Now consider a small X′′- separation (A′′, B′′) of G[B]. Then (A ∪ A′′, B′′) is a small X- separation of G, because |X′′| |X|. Therefore B′′ A′′ = B′′ (A ∪ A′′) is light by the assumption in (∗). Hence G[B] does satisfy the premise of (∗) for X′′, completing the proof of (2).
Using induction by contracting an edge, we have just shown that the vertices in V X may be assumed to have large degree. Using induction by deleting an edge, we now show that their degrees cannot be too large. Since (∗) holds if V = X, we may assume that V X = ∅; let d∗ denote d∗ the smallest degree in G of a vertex in V X. Let us prove the following:
We may assume that 8k d∗ 16k − 1. (3)
The lower bound in (3) follows from (2) if we assume that G has no isolated vertex outside X, which we may clearly assume by induction. For the upper bound, let us see what happens if we delete an edge e e = uv whose ends u, v are not both in X. If G − e satisfies the premise of (∗) with respect to X, then X is linked in G − e by induction, and hence in G. If not, then either V X is light in G − e, or G − e has a small X- separation (A, B) such that B A is heavy. If the latter happens then e must be an (A B)–(B A) edge: otherwise, (A, B) would be a small X- separation also of G, and B A would be heavy also in G, in contradiction to our assumptions in (∗). But if e is such an edge then any common neighbours of u and v lie in A ∩ B, so there are fewer than |X| 2k such neighbours. This contradicts (2). So V X must be light in G − e. For G, this yields
‖V X‖+ 8k |V X| + 1 . (4)
In order to show that this implies the desired upper bound for d∗, let us estimate the number f (x) of edges that a vertex x ∈ X sends to V X. f(x) There must be at least one such edge, xy say, as otherwise (X, V {x}) would be a small X- separation of G that contradicts our assumptions in (∗). But then, by (2), x and y have at least 8k − 1 common neighbours, at most 2k − 1 of which lie in X. Hence f (x) 6k. As
2 ‖V X‖+ = ∑
v∈V X
dG(v) + ∑
x∈X
f (x) ,